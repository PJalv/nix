This file is a merged representation of the entire codebase, combined into a single document.
Generated by Repomix on: 2025-02-27T18:57:21.589Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
users/
  pjalv/
    desktop/
      hardware-configuration.nix
    hm/
      dots/
        starship.toml
      entries.nix
      ghostty.nix
      gtk.nix
      hyprland.nix
      kitty.nix
      macropad.nix
      rofi.nix
      starship.nix
      waybar.nix
      zsh.nix
    laptop/
      hardware-configuration.nix
    hm.nix
    misc.nix
    test.nix
    user.nix
.gitignore
configuration.nix
flake.lock
flake.nix
hardware-configuration.nix
update.sh

================================================================
Files
================================================================

================
File: users/pjalv/desktop/hardware-configuration.nix
================
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "ahci" "usbhid" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/c3488a2b-4cde-4191-b9e6-db2c814d8297";
      fsType = "btrfs";
    };

  fileSystems."/home" =
    { device = "/dev/disk/by-uuid/4af21ee2-2892-4d6b-aeba-1a397b1eb84f";
      fsType = "btrfs";
    };

  fileSystems."/boot/efi" =
    { device = "/dev/disk/by-uuid/706B-4734";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/168c33e3-b59e-43ca-9ba5-9cb5dde2e361"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp8s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}

================
File: users/pjalv/hm/dots/starship.toml
================
# version: 1.0.0

add_newline = true
continuation_prompt = "[▸▹ ](dimmed white)"

format = """($nix_shell$container$fill$git_metrics\n)$cmd_duration\
$hostname\
$localip\
$shlvl\
$shell\
$directory\
$env_var\
$jobs\
$sudo\
$username\
$character"""

right_format = """
$singularity\
$kubernetes\
$vcsh\
$fossil_branch\
$git_branch\
$git_commit\
$git_state\
$git_status\
$hg_branch\
$pijul_channel\
$docker_context\
$package\
$c\
$cmake\
$cobol\
$daml\
$dart\
$deno\
$dotnet\
$elixir\
$elm\
$erlang\
$fennel\
$golang\
$guix_shell\
$haskell\
$haxe\
$helm\
$java\
$julia\
$kotlin\
$gradle\
$lua\
$nim\
$nodejs\
$ocaml\
$opa\
$perl\
$php\
$pulumi\
$purescript\
$python\
$raku\
$rlang\
$red\
$ruby\
$rust\
$scala\
$solidity\
$swift\
$terraform\
$vlang\
$vagrant\
$zig\
$buf\
$conda\
$meson\
$spack\
$memory_usage\
$aws\
$gcloud\
$openstack\
$azure\
$crystal\
$custom\
$status\
$os\
$battery\
$time"""

[fill]
symbol = ' '

[character]
format = "$symbol "
success_symbol = "[◎](bold italic bright-yellow)"
error_symbol = "[○](italic purple)"
vimcmd_symbol = "[■](italic dimmed green)"
# not supported in zsh
vimcmd_replace_one_symbol = "◌"
vimcmd_replace_symbol = "□"
vimcmd_visual_symbol = "▼"

[env_var.VIMSHELL]
format = "[$env_value]($style)"
style = 'green italic'

[sudo]
format = "[$symbol]($style)"
style = "bold italic bright-purple"
symbol = "⋈┈"
disabled = false

[username]
style_user = "bright-yellow bold italic"
style_root = "purple bold italic"
format = "[⭘ $user]($style) "
disabled = false
show_always = false

[directory]
home_symbol = "⌂"
truncation_length = 2
truncation_symbol = "□ "
read_only = " ◈"
use_os_path_sep = true
style = "italic blue"
format = '[$path]($style)[$read_only]($read_only_style)'
repo_root_style = 'bold blue'
repo_root_format = '[$before_root_path]($before_repo_root_style)[$repo_root]($repo_root_style)[$path]($style)[$read_only]($read_only_style) [△](bold bright-blue)'

[cmd_duration]
format = "[◄ $duration ](italic white)"

[jobs]
format = "[$symbol$number]($style) "
style = "white"
symbol = "[▶](blue italic)"

[localip]
ssh_only = true
format = " ◯[$localipv4](bold magenta)"
disabled = false

[time]
disabled = false
format = "[ $time]($style)"
time_format = "%R"
utc_time_offset = "local"
style = "italic dimmed white"

[battery]
format = "[ $percentage $symbol]($style)"
full_symbol = "█"
charging_symbol = "[↑](italic bold green)"
discharging_symbol = "↓"
unknown_symbol = "░"
empty_symbol = "▃"

[[battery.display]]
threshold = 20
style = "italic bold red"

[[battery.display]]
threshold = 60
style = "italic dimmed bright-purple"

[[battery.display]]
threshold = 70
style = "italic dimmed yellow"

[git_branch]
format = " [$branch(:$remote_branch)]($style)"
symbol = "[△](bold italic bright-blue)"
style = "italic bright-blue"
truncation_symbol = "⋯"
truncation_length = 11
ignore_branches = ["main", "master"]
only_attached = true

[git_metrics]
format = '([▴$added]($added_style))([▿$deleted]($deleted_style))'
added_style = 'italic dimmed green'
deleted_style = 'italic dimmed red'
ignore_submodules = true
disabled = false

[git_status]
style = "bold italic bright-blue"
format = "([⎪$ahead_behind$staged$modified$untracked$renamed$deleted$conflicted$stashed⎥]($style))"
conflicted = "[◪◦](italic bright-magenta)"
ahead = "[▴│[${count}](bold white)│](italic green)"
behind = "[▿│[${count}](bold white)│](italic red)"
diverged = "[◇ ▴┤[${ahead_count}](regular white)│▿┤[${behind_count}](regular white)│](italic bright-magenta)"
untracked = "[◌◦](italic bright-yellow)"
stashed = "[◃◈](italic white)"
modified = "[●◦](italic yellow)"
staged = "[▪┤[$count](bold white)│](italic bright-cyan)"
renamed = "[◎◦](italic bright-blue)"
deleted = "[✕](italic red)"

[deno]
format = " [deno](italic) [∫ $version](green bold)"
version_format = "${raw}"

[lua]
format = " [lua](italic) [${symbol}${version}]($style)"
version_format = "${raw}"
symbol = "⨀ "
style = "bold bright-yellow"

[nodejs]
format = " [node](italic) [◫ ($version)](bold bright-green)"
version_format = "${raw}"
detect_files = ["package-lock.json", "yarn.lock"]
detect_folders = ["node_modules"]
detect_extensions = []

[python]
format = " [py](italic) [${symbol}${version}]($style)"
symbol = "[⌉](bold bright-blue)⌊ "
version_format = "${raw}"
style = "bold bright-yellow"

[ruby]
format = " [rb](italic) [${symbol}${version}]($style)"
symbol = "◆ "
version_format = "${raw}"
style = "bold red"

[rust]
format = " [rs](italic) [$symbol$version]($style)"
symbol = "⊃ "
version_format = "${raw}"
style = "bold red"

[package]
format = " [pkg](italic dimmed) [$symbol$version]($style)"
version_format = "${raw}"
symbol = "◨ "
style = "dimmed yellow italic bold"

[swift]
format = " [sw](italic) [${symbol}${version}]($style)"
symbol = "◁ "
style = "bold bright-red"
version_format = "${raw}"

[aws]
disabled = true
format = " [aws](italic) [$symbol $profile $region]($style)"
style = "bold blue"
symbol = "▲ "

[buf]
symbol = "■ "
format = " [buf](italic) [$symbol $version $buf_version]($style)"

[c]
symbol = "ℂ "
format = " [$symbol($version(-$name))]($style)"

[conda]
symbol = "◯ "
format = " conda [$symbol$environment]($style)"

[dart]
symbol = "◁◅ "
format = " dart [$symbol($version )]($style)"

[docker_context]
symbol = "◧ "
format = " docker [$symbol$context]($style)"

[elixir]
symbol = "△ "
format = " exs [$symbol $version OTP $otp_version ]($style)"

[elm]
symbol = "◩ "
format = " elm [$symbol($version )]($style)"

[golang]
symbol = "∩ "
format = " go [$symbol($version )]($style)"

[haskell]
symbol = "❯λ "
format = " hs [$symbol($version )]($style)"

[java]
symbol = "∪ "
format = " java [${symbol}(${version} )]($style)"

[julia]
symbol = "◎ "
format = " jl [$symbol($version )]($style)"

[memory_usage]
symbol = "▪▫▪ "
format = " mem [${ram}( ${swap})]($style)"

[nim]
symbol = "▴▲▴ "
format = " nim [$symbol($version )]($style)"

[nix_shell]
style = 'bold italic dimmed blue'
symbol = '✶'
format = '[$symbol nix⎪$state⎪]($style) [$name](italic dimmed white)'
impure_msg = '[⌽](bold dimmed red)'
pure_msg = '[⌾](bold dimmed green)'
unknown_msg = '[◌](bold dimmed ellow)'

[spack]
symbol = "◇ "
format = " spack [$symbol$environment]($style)"

================
File: users/pjalv/hm/entries.nix
================
{ ... }:
{

  xdg.desktopEntries = {
    stm32cubemx = {
      name = "STM32CubeMX";
      genericName = "STM32CubeMX";
      exec = "stm32cubemx";
      terminal = false;
      categories = [ "Application" ];
    };

  };

}

================
File: users/pjalv/hm/ghostty.nix
================
{ pkgs, ... }:
{

  xdg.configFile."ghostty/config".text = ''
    font-family = FiraCode Nerd Font Mono
    font-size = 12.5
    window-padding-color = extend
    background-opacity = 0.94 
    unfocused-split-opacity = 0.90 
    theme = catppuccin-mocha
    window-theme = ghostty
    window-decoration = false


    gtk-titlebar = false
    gtk-tabs-location = bottom
    confirm-close-surface = false

    keybind = ctrl+shift+j=scroll_page_fractional:0.7
    keybind = ctrl+shift+k=scroll_page_fractional:-0.7

    keybind = alt+shift+h=previous_tab
    keybind = alt+shift+l=next_tab

  '';
  xdg.configFile."gtk-4.0/gtk.css".text = ''
    /*
    debug: env GTK_DEBUG=interactive ghostty
    https://docs.gtk.org/gtk4/css-overview.html
    https://docs.gtk.org/gtk4/css-properties.html
    */
    tabbar tabbox {
      margin: 0px;
      padding: 0px;
      min-height: 10px;
      background-color: #1a1a1a;
      font-family: monospace;
    }

    tabbar tabbox tab {
      margin: 0px;
      padding: 0px;
      color: #9ca3af;
      border-right: 1px solid #374151;
    }
    window > box > tabbar > revealer > box {
      margin: 0px;
    }

    tabbar tabbox tab.active {
      background-color: #2d2d2d;
      color: #ffffff;
    }

    tabbar tabbox tab label {
     font-size: 13px;
    }
    tabbar {background-color: #0a0a0aC9} RGB+opacity
  '';
}

================
File: users/pjalv/hm/gtk.nix
================
{ pkgs, ... }:
{
  gtk = {
    enable = true;
    # theme = {
    #   name = "Tokyonight-Dark";
    #   package = pkgs.tokyonight-gtk-theme;
    #
    # };

    font = {
      name = "Nunito";
      size = 10;
    };

    iconTheme = {
      name = "Papirus-Dark";
      package = pkgs.papirus-icon-theme;
    };

    gtk3.extraConfig = {
      gtk-xft-antialias = 1;
      gtk-xft-hinting = 1;
      gtk-xft-hintstyle = "hintslight";
      gtk-xft-rgba = "rgb";
      gtk-application-prefer-dark-theme = 1;
    };

    gtk2.extraConfig = ''
      gtk-xft-antialias=1
      gtk-xft-hinting=1
      gtk-xft-hintstyle="hintslight"
      gtk-xft-rgba="rgb"
      gtk-application-prefer-dark-theme=1
    '';

    cursorTheme = {
      name = "catppuccin-macchiato-dark-cursors";
      package = pkgs.catppuccin-cursors.macchiatoDark;
    };
  };
}

================
File: users/pjalv/hm/hyprland.nix
================
{
  config,
  pkgs,
  lib,
  ...
}:
let
  machine = "desktop";
  username = "pjalv";
in
{

  wayland.windowManager.hyprland = {
    enable = true;
    settings = {
      # autostart
      exec-once = [
        "copyq --start-server"
        "wl-paste --type text --watch cliphist store # Stores only text data"
        "dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP"
        "wl-paste --type image --watch cliphist store # Stores only image data"
        "mako"
        "macro_go 'chromium' '.spotify-wrapped'"
        "[workspace 1 silent] chromium-browser --autoplay-policy=no-user-gesture-required"
        "sleep 1 && waybar"
      ];

      input = {
        kb_layout = "us";
        kb_options = "caps:swapescape";
        follow_mouse = 2;
        scroll_factor = 3;
        accel_profile = "flat";

        touchpad = {
          natural_scroll = true;
        };
        repeat_delay = 250;
        repeat_rate = 50;
      };
      gestures = {
        workspace_swipe = true;
      };
      general = {
        "$fileManager" = "thunar";
        "$terminal" = "ghostty";
        "$menu" = "rofi";
        "$mainMod" = "ALT";
        layout = "dwindle";
        gaps_in = 1;
        gaps_out = 0;
        border_size = 1;
        "col.active_border" = "rgba(33ccffee) rgba(00ff99ee) 45deg";
        "col.inactive_border" = "rgba(595959aa)";
      };

      cursor = {
        inactive_timeout = 5;
      };
      misc = {
        disable_hyprland_logo = true;
        always_follow_on_dnd = true;
        middle_click_paste = false;
      };

      dwindle = {
        # no_gaps_when_only = false;
        preserve_split = true;
      };

      decoration = {
        rounding = 4;
        active_opacity = 1.0;
        inactive_opacity = 1.0;

        # drop_shadow = false;
        # "col.shadow" = "rgba(1a1a1aee)";
        blur = {
          enabled = false;
          size = 3;
          passes = 1;
        };

        # shadow_range = 4;
        # shadow_render_power = 3;
      };

      animations = {
        enabled = true;

        bezier = [
          "myBezier, 0.05, 0.9, 0.1, 1.05"
        ];

        animation = [
          "windows, 1, 7, myBezier"
          "windowsOut, 1, 7, default, popin 80%"
          "border, 1, 10, default"
          "borderangle, 1, 8, default"
          "fade, 1, 7, default"
          "workspaces, 1, 6, default"
        ];
      };

      bind = [
        # show keybinds list
        "$mainMod, F1, exec, show-keybinds"
        "SUPER, v, exec, copyq show"
        # Example binds, see https://wiki.hyprland.org/Configuring/Binds/ for more
        "SUPER, D, exec, vesktop"
        "SUPER, S, exec, spotify"
        "$mainMod, RETURN, exec, $terminal"
        "$mainMod, Q, killactive,"
        "$mainMod, M, exit,"
        "$mainMod, E, exec, $fileManager"
        "$mainMod, V, togglefloating,"
        "$mainMod, SPACE, exec, $menu -show drun -show-icons"
        "$mainMod, P, pseudo" # dwindle
        "$mainMod, B, togglesplit"

        # Move focus with mainMod + arrow keys
        "$mainMod, h, movefocus, l"
        "$mainMod, l, movefocus, r"
        "$mainMod, k, movefocus, u"
        "$mainMod, j, movefocus, d"

        # Switch workspaces with mainMod + [0-9]
        "$mainMod, 1, workspace, 1"
        "$mainMod, 2, workspace, 2"
        "$mainMod, 3, workspace, 3"
        "$mainMod, 4, workspace, 4"
        "$mainMod, 5, workspace, 5"
        "$mainMod, 6, workspace, 6"
        "$mainMod, 7, workspace, 7"
        "$mainMod, 8, workspace, 8"
        "$mainMod, 9, workspace, 9"
        "$mainMod, 0, workspace, 10"

        # Move active window to a workspace with mainMod + SHIFT + [0-9]
        "$mainMod SHIFT, 1, movetoworkspace, 1"
        "$mainMod SHIFT, 2, movetoworkspace, 2"
        "$mainMod SHIFT, 3, movetoworkspace, 3"
        "$mainMod SHIFT, 4, movetoworkspace, 4"
        "$mainMod SHIFT, 5, movetoworkspace, 5"
        "$mainMod SHIFT, 6, movetoworkspace, 6"
        "$mainMod SHIFT, 7, movetoworkspace, 7"
        "$mainMod SHIFT, 8, movetoworkspace, 8"
        "$mainMod SHIFT, 9, movetoworkspace, 9"
        "$mainMod SHIFT, 0, movetoworkspace, 10"

        # media and volume controls
        # ",XF86AudioMute,exec, pamixer -t"
        ",XF86AudioPlay,exec, playerctl play-pause"
        ",XF86AudioNext,exec, playerctl next"
        ",XF86AudioPrev,exec, playerctl previous"
        ",XF86AudioStop,exec, playerctl stop"
        # Example special workspace (scratchpad)
        "$mainMod, S, togglespecialworkspace, magic"
        "$mainMod SHIFT, S, movetoworkspace, special:magic"

        # Scroll through existing workspaces with mainMod + scroll
        "$mainMod, mouse_down, workspace, e+1"
        "$mainMod, mouse_up, workspace, e-1"

        # SCREENSHOT

        "$mainMod,code:117, exec, pactl set-sink-mute @DEFAULT_SINK@ toggle"
      ];

      # # binds active in lockscreen
      # bindl = [
      #   # laptop brigthness
      #   ",XF86MonBrightnessUp, exec, brightnessctl set 5%+"
      #   ",XF86MonBrightnessDown, exec, brightnessctl set 5%-"
      #   "$mainMod, XF86MonBrightnessUp, exec, brightnessctl set 100%+"
      #   "$mainMod, XF86MonBrightnessDown, exec, brightnessctl set 100%-"
      # ]h

      # binde = [
      #   ", l, resizeactive, 50 0"
      #   ", h, resizeactive, -50 0"
      #   ", k, resizeactive, 0 -40"
      #   ", j, resizeactive, 0 40"
      # ];

      # mouse binding
      bindm = [
        "$mainMod, mouse:272, movewindow"
        "$mainMod, mouse:273, resizewindow"
      ];

      # windowrule
      windowrule = [
        "pin,rofi"
      ];

      # windowrulev2
      windowrulev2 = [
        "float,class:org.pulseaudio.pavucontrol"
        "size 900 450,class:org.pulseaudio.pavucontrol"
        "float,class:com.github.hluk.copyq"
        "size 422 652,class:com.github.hluk.copyq"

        "suppressevent maximize, class:.*" # You'll probably like this.
      ];

    };

    extraConfig =
      let
        laptopConfig = ''
            monitor = eDP-1,2240x1400,0x0,1
          input {
          sensitivity = 0.9
          }
        '';
        desktopConfig = ''
          monitor=DP-3,1920x1080@144,0x0,1
          monitor=HDMI-A-1,1920x1080,-1080x-200,1,transform,3
          workspace=9, monitor:HDMI-A-1
          exec-once=[workspace 9 silent] vesktop & hyprctl dispatch workspace 9
        '';
      in
      ''
        ${if machine == "laptop" then laptopConfig else desktopConfig}

        exec-once = swww-daemon
        exec-once = nm-applet --indicator
        exec-once = fusuma
        exec-once = swww img "$(find -L .config/wallpaper -type f \( -iname '*.jpg' -o -iname '*.png' -o -iname '*.jpeg' \) | shuf -n 1)"
        # will start a submap called 'resize'
        # sets repeatable binds for resizing the active window
        # use reset to go back to the global submap
        # will reset the submap, meaning end the current one and return to the global one
        xwayland {
        force_zero_scaling = true
        }

        env = XCURSOR_SIZE,24
        env = HYPRCURSOR_SIZE,24
        device {
        name = epic-mouse-v1
        sensitivity = -0.5
        }
        bind = SUPER_SHIFT, S, exec, grim -g "$(slurp -d)" - | wl-copy
        bind = ALT, R, submap, resize
        # will start a submap called "resize"
        submap = resize
        # sets repeatable binds for resizing the active window
        binde = , l, resizeactive, 50 0
        binde = , h, resizeactive, -50 0
        binde = , k, resizeactive, 0 -40
        binde = , j, resizeactive, 0 40 # use reset to go back to the global submap
        bind = , escape, submap, reset
        # will reset the submap, meaning end the current one and return to the global one
        submap = reset
        bind = $mainMod,code:117, exec, pactl set-sink-mute @DEFAULT_SINK@ toggle
        bindl=, XF86AudioMute, exec, pactl set-sink-mute @DEFAULT_SINK@ toggle
        bindel=, XF86AudioLowerVolume, exec, pactl -- set-sink-volume 0 -5%
        bindel=, XF86AudioRaiseVolume, exec, pactl -- set-sink-volume 0 +5%
        bindel=, XF86MonBrightnessDown, exec, brightnessctl s 5%-
        bindel=, XF86MonBrightnessUp, exec, brightnessctl s 5%+
      '';
  };
}

================
File: users/pjalv/hm/kitty.nix
================
{ pkgs, ... }:
{
  programs.kitty = {
    enable = true;

    theme = "Catppuccin-Mocha";

    font = {
      name = "FiraCode Nerd Font";
      size = 11;
    };

    settings = {
      confirm_os_window_close = 1;
      background_opacity = "0.94";
      scrollback_lines = 10000;
      enable_audio_bell = false;
      mouse_hide_wait = 60;

      ## Tabs
      tab_title_template = "{index}";
      active_tab_font_style = "normal";
      inactive_tab_font_style = "normal";
      tab_bar_style = "powerline";
      tab_powerline_style = "angled";
      active_tab_foreground = "#FBF1C7";
      active_tab_background = "#7C6F64";
      inactive_tab_foreground = "#FBF1C7";
      inactive_tab_background = "#3C3836";
    };

    keybindings = {
      ## Tabs
      "shift+alt+h" = "previous_tab";
      "shift+alt+l" = "next_tab";

      ## Unbind
      "ctrl+shift+left" = "no_op";
      "ctrl+shift+right" = "no_op";
    };
  };
}

================
File: users/pjalv/hm/macropad.nix
================
{ pkgs, lib, ... }:

pkgs.buildGoModule rec {
  pname = "macro_go";
  version = "0.1.2";

  src =
    pkgs.fetchFromGitHub {
      owner = "PJalv";
      repo = "macropad";
      rev = "a2503e7f57f34c240763b532f6e3036d333f4c37";
      hash = "sha256-h75Fkw3R8mNdt7imamIpfuzsyYP66BT0Nv5UPAnabRo=";
    }
    + "/macro_go";

  vendorHash = "sha256-wSrY7GIXYcLh6iuhMKu8gqSsXUWj8CdBvMDgT3bH18o=";
  proxyVendor = true;
  meta = {
    description = "PJalv's Macropad Project";
    homepage = "https://github.com/PJalv/macropad";
    license = lib.licenses.mit;
    maintainers = with lib.maintainers; [ PJalv ];
  };
}

================
File: users/pjalv/hm/rofi.nix
================
{ pkgs, ... }:
{
  home.packages = (with pkgs; [ rofi-wayland ]);

  xdg.configFile."rofi/catppuccin-frappe.rasi".text = ''
      * {
        bg-col:  #303446;
        bg-col-light: #303446;
        border-col: #303446;
        selected-col: #303446;
        blue: #8caaee;
        fg-col: #c6d0f5;
        fg-col2: #e78284;
        grey: #737994;

        width: 600;
        font: "JetBrainsMono Nerd Font 14";
    }

    element-text, element-icon , mode-switcher {
        background-color: inherit;
        text-color:       inherit;
    }

    window {
        height: 360px;
        border: 3px;
        border-color: @border-col;
        background-color: @bg-col;
    }

    mainbox {
        background-color: @bg-col;
    }

    inputbar {
        children: [prompt,entry];
        background-color: @bg-col;
        border-radius: 5px;
        padding: 2px;
    }

    prompt {
        background-color: @blue;
        padding: 6px;
        text-color: @bg-col;
        border-radius: 3px;
        margin: 20px 0px 0px 20px;
    }

    textbox-prompt-colon {
        expand: false;
        str: ":";
    }

    entry {
        padding: 6px;
        margin: 20px 0px 0px 10px;
        text-color: @fg-col;
        background-color: @bg-col;
    }

    listview {
        border: 0px 0px 0px;
        padding: 6px 0px 0px;
        margin: 10px 0px 0px 20px;
        columns: 2;
        lines: 5;
        background-color: @bg-col;
    }

    element {
        padding: 5px;
        background-color: @bg-col;
        text-color: @fg-col  ;
    }

    element-icon {
        size: 25px;
    }

    element selected {
        background-color:  @selected-col ;
        text-color: @fg-col2  ;
    }

    mode-switcher {
        spacing: 0;
      }

    button {
        padding: 10px;
        background-color: @bg-col-light;
        text-color: @grey;
        vertical-align: 0.5; 
        horizontal-align: 0.5;
    }

    button selected {
      background-color: @bg-col;
      text-color: @blue;
    }

    message {
        background-color: @bg-col-light;
        margin: 2px;
        padding: 2px;
        border-radius: 5px;
    }

    textbox {
        padding: 6px;
        margin: 20px 0px 0px 20px;
        text-color: @blue;
        background-color: @bg-col-light;
    }
  '';

  xdg.configFile."rofi/config.rasi".text = ''
      configuration{
        modi: "run,drun,window";
        icon-theme: "Oranchelo";
        show-icons: true;
        terminal: "alacritty";
        drun-display-format: "{icon} {name}";
        location: 0;
        disable-history: false;
        hide-scrollbar: true;
        display-drun: "   Apps ";
        display-run: "   Run ";
        display-window: " 﩯  Window";
        display-Network: " 󰤨  Network";
        sidebar-mode: true;
    }

    @theme "catppuccin-frappe"


    #window {
     border-radius: 10px;
    } 
  '';
}

================
File: users/pjalv/hm/starship.nix
================
{ config, pkgs, ... }:
{
  home.sessionVariables.STARSHIP_CACHE = "${config.xdg.cacheHome}/starship";

  programs.starship = {

    enable = true;
    enableZshIntegration = true;
    settings = pkgs.lib.importTOML ./dots/starship.toml;

  };

}

================
File: users/pjalv/hm/waybar.nix
================
{
  config,
  pkgs,
  lib,
  ...
}:

let
  machine = "desktop";
  username = "pjalv";
  # Define the Git repository URL and revision (e.g., branch, commit hash, etc.)
  dotfilesRepo = pkgs.fetchgit {
    url = "https://github.com/PJalv/dotfiles.git"; # Replace with your repo URL
    rev = "e610a6cf72fd4b6d1224c995008c540136f472a5";
    # Or specify the commit hash/branch/tag
    sha256 = "sha256-6+8vb2OfptV7GNHC635EVEi/hzTAc9JF0HF/nP7wiPQ="; # This will be automatically replaced when you run `nixos-rebuild`
  };

  # Define the location of your dotfiles directory
  dotfilesDir = dotfilesRepo;
in

{

  programs.waybar = {
    enable = true;
    package = pkgs.waybar.overrideAttrs (oldAttrs: {
      mesonFlags = oldAttrs.mesonFlags ++ [ "-Dexperimental=true" ];
    });
    systemd.enable = false;
    style = ''
      ${builtins.readFile "${dotfilesDir}/.config/waybar/styles/style.css"}
    '';
    settings = [
      {
        height = 20;
        layer = "top";
        position = "top";
        tray = {
          spacing = 10;
        };
        modules-center = [ "hyprland/window" ];
        modules-left = [
          "hyprland/workspaces"
          "custom/media"
          "custom/process_volume"
        ];
        modules-right =
          [
            "pulseaudio"
            "network"
            "cpu"
            "memory"
            "backlight"
          ]
          ++ (
            if machine == "laptop" then
              [
                "power-profiles-daemon"
                "temperature"
                "battery"
              ]
            else
              [ ]
          )
          ++ [
            "clock"
            "tray"
          ];
        battery = {
          format = "{capacity}% {icon} ";
          format-alt = "{time} {icon}";
          format-charging = "{capacity}%  ";
          format-icons = [
            " "
            " "
            " "
            " "
            " "
          ];
          format-plugged = "{capacity}%  ";
          states = {
            critical = 15;
            warning = 30;
          };
        };
        power-profiles-daemon = {
          format = "{icon}";
          # format = "Power profile: {profile}\nDriver: {driver}";
          tooltip = true;
          format-icons = {
            default = " ";
            performance = " ";
            balanced = " ";
            power-saver = " ";
          };
        };
        backlight = {
          format = "{percent}% {icon}";
          format-icons = [
            " "
            " "
            " "
            " "
            " "
            " "
            " "
            " "
            " "
          ];
        };
        clock = {
          tooltip-format = "<big>{:%A, %d.%B %Y }</big>\n<tt><small>{calendar}</small></tt>";
          format = "{:%I:%M:%S}";
          format-alt = " {:%d/%m/%Y  %H:%M:%S}";
          interval = 1;
        };
        cpu = {
          format = "{usage}%  ";
          tooltip = false;
          interval = 2;
        };
        memory = {
          interval = 5;
          format = "{}%  ";
        };
        network = {
          interval = 1;
          format-alt = "{ifname}: {ipaddr}/{cidr}";
          format-disconnected = "Disconnected ⚠";
          format-ethernet = "{ipaddr}/{cidr}";
          format-linked = "{ifname} (No IP) ";
          format-wifi = "{essid} ({signalStrength}%)  ";
        };
        "custom/media" = {
          exec = "playerctl --follow metadata --format '{\"text\": \"{{ artist }} - {{ title }}\", \"class\": \"custom-spotify\", \"alt\": \"spotify\"}' --player=spotify";
          format = "{}  ";
          return-type = "json";
          on-click = "playerctl --player=spotify,vlc play-pause";
          on-scroll-up = "playerctl --player=spotify,vlc next";
          on-scroll-down = "playerctl --player=spotify,vlc previous";
        };
        "custom/process_volume" = {
          exec = "${dotfilesDir}/.config/waybar/apps_volume chromium spotify";
          format = "{}";
          return-type = "json";
          # on-click = "playerctl --player=spotify,vlc play-pause";
          # on-scroll-up = "playerctl --player=spotify,vlc next";
          # on-scroll-down = "playerctl --player=spotify,vlc previous";
        };
        pulseaudio = {
          scroll-step = 2;
          format = "{volume}% {icon} {format_source}";
          format-bluetooth = "{volume}% {icon} {format_source}";
          format-bluetooth-muted = " {icon} {format_source}";
          format-icons = {
            car = "";
            default = [
              " "
              " "
              "  "
            ];
            handsfree = " ";
            headphones = " ";
            headset = " ";
            phone = " ";
            portable = " ";
          };
          format-muted = "  {format_source}";
          format-source = "{volume}% ";
          format-source-muted = " ";
          on-click = "pavucontrol";
          on-click-middle = "pactl set-sink-mute 0 toggle";
        };
        "hyprland/mode" = {
          format = ''<span style="italic">{}</span>'';
        };
        temperature = {
          critical-threshold = 80;
          format = "{temperatureC}°C {icon}";
          format-icons = [
            ""
            ""
            ""
          ];
        };
      }
    ];
  };

  xdg.configFile."waybar/mocha.css".text = ''
    @define-color rosewater #f5e0dc;
    @define-color flamingo #f2cdcd;
    @define-color pink #f5c2e7;
    @define-color mauve #cba6f7;
    @define-color red #f38ba8;
    @define-color maroon #eba0ac;
    @define-color peach #fab387;
    @define-color yellow #f9e2af;
    @define-color green #a6e3a1;
    @define-color teal #94e2d5;
    @define-color sky #89dceb;
    @define-color sapphire #74c7ec;
    @define-color blue #89b4fa;
    @define-color lavender #b4befe;
    @define-color text #cdd6f4;
    @define-color subtext1 #bac2de;
    @define-color subtext0 #a6adc8;
    @define-color overlay2 #9399b2;
    @define-color overlay1 #7f849c;
    @define-color overlay0 #6c7086;
    @define-color surface2 #585b70;
    @define-color surface1 #45475a;
    @define-color surface0 #313244;
    @define-color base #1e1e2e;
    @define-color mantle #181825;
    @define-color crust #11111b;
  '';

}

================
File: users/pjalv/hm/zsh.nix
================
{
  config,
  pkgs,
  host,
  ...
}:
{
  programs.zsh = {
    enable = true;
    # enableCompletion = true;
    autosuggestion.enable = true;
    syntaxHighlighting.enable = true;

    plugins = [
      {
        # Must be before plugins that wrap widgets, such as zsh-autosuggestions or fast-syntax-highlighting
        name = "fzf-tab";
        src = "${pkgs.zsh-fzf-tab}/share/fzf-tab";
      }
      {
        name = "powerlevel10k";
        src = pkgs.zsh-powerlevel10k;
        file = "share/zsh-powerlevel10k/powerlevel10k.zsh-theme";
      }
    ];

    completionInit = ''
      # Load Zsh modules
      # zmodload zsh/zle
      # zmodload zsh/zpty
      # zmodload zsh/complist

      # Initialize colors
      autoload -Uz colors
      colors

      # Initialize completion system
      # autoload -U compinit
      # compinit
      _comp_options+=(globdots)

      # Load edit-command-line for ZLE
      autoload -Uz edit-command-line
      zle -N edit-command-line
      bindkey "^e" edit-command-line

      # General completion behavior
      zstyle ':completion:*' completer _extensions _complete _approximate

      # Use cache
      zstyle ':completion:*' use-cache on
      zstyle ':completion:*' cache-path "$XDG_CACHE_HOME/zsh/.zcompcache"

      # Complete the alias
      zstyle ':completion:*' complete true

      # Autocomplete options
      zstyle ':completion:*' complete-options true

      # Completion matching control
      zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
      zstyle ':completion:*' keep-prefix true

      # Group matches and describe
      zstyle ':completion:*' menu select
      zstyle ':completion:*' list-grouped false
      zstyle ':completion:*' list-separator '''
      zstyle ':completion:*' group-name '''
      zstyle ':completion:*' verbose yes
      zstyle ':completion:*:matches' group 'yes'
      zstyle ':completion:*:warnings' format '%F{red}%B-- No match for: %d --%b%f'
      zstyle ':completion:*:messages' format '%d'
      zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
      zstyle ':completion:*:descriptions' format '[%d]'

      # Colors
      zstyle ':completion:*' list-colors ''${(s.:.)LS_COLORS}

      # Directories
      zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
      zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
      zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
      zstyle ':completion:*:*:-command-:*:*' group-order aliases builtins functions commands
      zstyle ':completion:*' special-dirs true
      zstyle ':completion:*' squeeze-slashes true

      # Sort
      zstyle ':completion:*' sort false
      zstyle ":completion:*:git-checkout:*" sort false
      zstyle ':completion:*' file-sort modification
      zstyle ':completion:*:eza' sort false
      zstyle ':completion:complete:*:options' sort false
      zstyle ':completion:files' sort false

      # fzf-tab
      zstyle ':fzf-tab:complete:*:*' fzf-preview 'eza --icons  -a --group-directories-first -1 --color=always $realpath'
      zstyle ':fzf-tab:complete:kill:argument-rest' fzf-preview 'ps --pid=$word -o cmd --no-headers -w -w'
      zstyle ':fzf-tab:complete:kill:argument-rest' fzf-flags '--preview-window=down:3:wrap'
      zstyle ':fzf-tab:*' fzf-command fzf
      zstyle ':fzf-tab:*' fzf-pad 4
      zstyle ':fzf-tab:*' fzf-min-height 100
      zstyle ':fzf-tab:*' switch-group ',' '.'
    '';

    initExtraFirst = ''
      # Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
      # Initialization code that may require console input (password prompts, [y/n]
      # confirmations, etc.) must go above this block; everything else may go below.
      if [[ -r "''${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-''${(%):-%n}.zsh" ]]; then
        source "''${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-''${(%):-%n}.zsh"
      fi

      DISABLE_AUTO_UPDATE=true
      DISABLE_MAGIC_FUNCTIONS=true
      export "MICRO_TRUECOLOR=1"

      setopt sharehistory
      setopt hist_ignore_space
      setopt hist_ignore_all_dups
      setopt hist_save_no_dups
      setopt hist_ignore_dups
      setopt hist_find_no_dups
      setopt hist_expire_dups_first
      setopt hist_verify

      load_api_keys() {
          local api_keys_file="$HOME/.api_keys"

          if [[ -f "$api_keys_file" ]]; then
              while IFS= read -r line; do
                  # Skip empty lines and comments
                  [[ -z "$line" || "$line" == \#* ]] && continue

                  # Export each line as an environment variable
                  export "$line"
              done < "$api_keys_file"
              echo "✅ API keys loaded successfully!"
          else
              echo "⚠️  Missing .api_keys file"
          fi
      }
      source ~/.p10k.zsh

      # Use fd (https://github.com/sharkdp/fd) for listing path candidates.
      # - The first argument to the function ($1) is the base path to start traversal
      # - See the source code (completion.{bash,zsh}) for the details.
      _fzf_compgen_path() {
        fd --hidden --exclude .git . "$1"
      }

      # Use fd to generate the list for directory completion
      _fzf_compgen_dir() {
        fd --type=d --hidden --exclude .git . "$1"
      }

      # Advanced customization of fzf options via _fzf_comprun function
      # - The first argument to the function is the name of the command.
      # - You should make sure to pass the rest of the arguments to fzf.
      _fzf_comprun() {
        local command=$1
        shift

        case "$command" in
          cd)           fzf --preview 'eza --tree --color=always {} | head -200' "$@" ;;
          ssh)          fzf --preview 'dig {}'                   "$@" ;;
          *)            fzf --preview "$show_file_or_dir_preview" "$@" ;;
        esac
      }

      # Make sure that the terminal is in application mode when zle is active, since
      # only then values from $terminfo are valid
      if (( ''${+terminfo[smkx]} )) && (( ''${+terminfo[rmkx]} )); then
        function zle-line-init() {
          echoti smkx
        }
        function zle-line-finish() {
          echoti rmkx
        }
        zle -N zle-line-init
        zle -N zle-line-finish
      fi
    '';
    shellAliases = {
      cd = "z";
      ls = "ls --color";
      vim = "nvim";
      c = "clear";
      pbc = "wl=copy";
      pbp = "wl-paste";
      nix-shell = "nix-shell --run $SHELL";

      nixedit = "cd /etc/nixos && nvim .";
      nixupdate = "git stage . && git commit -m 'Tweak' && sudo nixos-rebuild switch";

    };
  };

  programs.zoxide = {
    enable = true;
    enableZshIntegration = true;
  };
  programs.fzf = {
    enable = true;
    enableZshIntegration = true;
  };

}

================
File: users/pjalv/laptop/hardware-configuration.nix
================
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = [
    "nvme"
    "xhci_pci"
    "rtsx_pci_sdmmc"
  ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/820470a8-d510-45b9-9f6b-34ee74bba3ff";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/BD68-D7C4";
    fsType = "vfat";
    options = [
      "fmask=0022"
      "dmask=0022"
    ];
  };

  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/8e179950-080c-472f-af5f-2af1e6c6ee4a";
    fsType = "btrfs";
  };

  swapDevices = [
    { device = "/dev/disk/by-uuid/44ccc7a9-7ef0-40dc-b28f-29bf9fd68f6e"; }
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp1s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}

================
File: users/pjalv/hm.nix
================
{
  config,
  pkgs,
  lib,
  ...
}:
let
  # Define the Git repository URL and revision (e.g., branch, commit hash, etc.)
  dotfilesRepo = pkgs.fetchgit {
    url = "https://github.com/PJalv/dotfiles.git"; # Replace with your repo URL
    rev = "4acfbbf7255deabe4438bd2d1f07782dbfbb4f47";
    # Or specify the commit hash/branch/tag
    sha256 = "sha256-KLguT+Ggy/z9shEcTKgWxU/0OlUoFguSqQHh25sLpvg="; # This will be automatically replaced when you run `nixos-rebuild`
  };

  # Define the location of your dotfiles directory
  dotfilesDir = dotfilesRepo;
in
{

  xdg.configFile = {

    wallpaper.source = "${dotfilesDir}/.config/wallpaper"; # Neovim config
    fusuma.source = "${dotfilesDir}/.config/fusuma"; # Neovim config
    mako.source = "${dotfilesDir}/.config/mako"; # Neovim config
    styles.source = "${dotfilesDir}/.config/waybar"; # Neovim config
  };
xdg.mimeApps = {
    enable = true;
    associations.added = {
      "x-scheme-handler/http" = ["chromium-browser.desktop"];
      "x-scheme-handler/https" = ["chromium-browser.desktop"];
      "text/html" = ["chromium-browser.desktop"];
      "application/pdf" = ["chromium-browser.desktop"];
    };
    defaultApplications = {
      "x-scheme-handler/http" = ["chromium-browser.desktop"];
      "x-scheme-handler/https" = ["chromium-browser.desktop"];
      "text/html" = ["chromium-browser.desktop"];
      "application/pdf" = ["chromium-browser.desktop"];
    };
  };
  home.packages = with pkgs; [
    lazygit
    swww
    sassc
    gtk-engine-murrine
    gtk_engines
    gnome-themes-extra
    zoxide
    zed-editor
    arduino-ide
  ];

  imports = [
    ./hm/zsh.nix
    ./hm/rofi.nix
    ./hm/hyprland.nix
    ./hm/waybar.nix
    ./hm/ghostty.nix
    ./hm/entries.nix
    # ./hm/starship.nix
    # ./kitty.nix
  ];

  programs.direnv = {
    enable = true;
    enableZshIntegration = true;
    nix-direnv.enable = true;

  };
  programs.chromium = {
    enable = true;
    extensions = [
      { id = "cjpalhdlnbpafiamejdnhcphjbkeiagm"; } # ublock origin
      { id = "ghmbeldphafepmbegfdlkpapadhbakde"; } # proton pass

    ];
    commandLineArgs = [
      "--force-dark-mode"
    ];
  };

  # programs.bash.enable = true;
  programs.git.extraConfig.init.defaultBranch = "main";
  programs.git.extraConfig.safe.directory = "/etc/nixos";
  programs.git.extraConfig.pull.rebase = false;
  programs.git = {
    enable = true;
    userName = "PJalv";
    userEmail = "pjalvbusiness@gmail.com";
  };
  programs.gh.enable = true;
  # The state version is required and should stay at the version you
  # originally installed.
  home.stateVersion = "24.05";
  dconf.settings = {
    "org/gnome/desktop/interface" = {
      color-scheme = "prefer-dark";
    };
  };
  gtk = {
    enable = true;
    theme = {
      name = "Tokyonight-Dark";
      package = pkgs.tokyonight-gtk-theme;

    };

    font = {
      name = "Nunito";
      size = 10;
    };

    iconTheme = {
      name = "Papirus-Dark";
      package = pkgs.papirus-icon-theme;
    };

    gtk3.extraConfig = {
      gtk-xft-antialias = 1;
      gtk-xft-hinting = 1;
      gtk-xft-hintstyle = "hintslight";
      gtk-xft-rgba = "rgb";
      gtk-application-prefer-dark-theme = 1;
    };

    gtk2.extraConfig = ''
      gtk-xft-antialias=1
      gtk-xft-hinting=1
      gtk-xft-hintstyle="hintslight"
      gtk-xft-rgba="rgb"
      gtk-application-prefer-dark-theme=1
    '';

    cursorTheme = {
      name = "catppuccin-macchiato-dark-cursors";
      package = pkgs.catppuccin-cursors.macchiatoDark;
    };
  };

  home.pointerCursor = {
    name = "catppuccin-macchiato-dark-cursors";
    package = pkgs.catppuccin-cursors.macchiatoDark;
    size = 30;
    gtk.enable = true;
    x11.enable = true;
  };

  home.sessionVariables = { };

}

================
File: users/pjalv/misc.nix
================
{ config
, lib
, pkgs
, ...
}:
{
  # You can add options here if needed
  # options = {
  # };

  # Your configurations go here
  config = {
    # Add your miscellaneous configurations here
    # For example:
    # environment.systemPackages = with pkgs; [ ];
    # programs.some-program.enable = true;
    # services.some-service.enable = true;
  };
}

================
File: users/pjalv/test.nix
================
{ config
, lib
, pkgs
, ...
}:
{
  # Test-specific options can be defined here
  # options = {
  # };

  config = {
    # Test environment configurations
    environment = {
      # Test-specific packages can go here
      # systemPackages = with pkgs; [ ];
    };

    # Test-specific services
    services = {
      # Example:
      # test-service.enable = true;
      # test-service.settings = { };
    };

    # Test-specific system configurations
    systemd = {
      # Example:
      # services.test-daemon = {
      #   enable = true;
      #   description = "Test Daemon";
      # };
    };

    # Virtual machine settings (if testing in VM)
    # virtualisation = {
    #   memorySize = 2048;  # Example: VM with 2GB RAM
    #   cores = 2;          # Example: VM with 2 cores
    # };
  };
}

================
File: users/pjalv/user.nix
================
{
  config,
  lib,
  pkgs,
  ...
}:
let
  tuigreet = "${pkgs.greetd.tuigreet}/bin/tuigreet";
  session = "${pkgs.hyprland}/bin/Hyprland"; # Fixed typo here

  # Define base packages that are common to both laptop and desktop
  basePackages = with pkgs; [
    vim
    neovim
    wget
    networkmanagerapplet
    gnumake
    wireguard-tools
    lxqt.lxqt-policykit
    liberation_ttf
    basedpyright
    clang
    clang-tools
    cargo
    git
    basedpyright
    gopls
    lua-language-server
    nixd
    compiledb
    btop
    home-manager
    minicom
    mako
    libnotify
    wl-clipboard
    swappy
    grim
    copyq
    eza
    bc
    unzip
    slurp
    direnv
    gcc
    playerctl
    fzf
    zoxide
    ripgrep
    kitty
    waybar
    vesktop
    rofi-wayland
    rofi
    vial
    pavucontrol
    pulseaudio
    obs-studio
    spotify
    stm32cubemx
    xfce.thunar
    xfce.tumbler
    libreoffice
    vlc
    (import ./hm/macropad.nix pkgs)
  ];

  # Define laptop-specific packages
  laptopPackages = with pkgs; [
    acpi
    brightnessctl
    fusuma
    catppuccin-sddm-corners
    qemu
    quickemu
  ];

  # Define desktop-specific packages
  desktopPackages = with pkgs; [
    bottles
    steam-rom-manager
    # stm32cubemx
    # openocd
    # kdePackages.kdeconnect-kde
  ];
in
{
  options = {
    username = lib.mkOption {
      type = lib.types.str;
      default = "pjalv";
      description = "Primary user of the system";
    };

    machine = lib.mkOption {
      type = lib.types.str;
      default = "desktop";
      description = "Machine identifier";
    };
  };

  imports = [
    ./desktop/hardware-configuration.nix # "laptop"
  ];
  config = lib.mkMerge [
    # Common configuration
    {
      networking.hostName = "pjalv-${config.machine}";
      networking.networkmanager.enable = true;
      hardware.keyboard.qmk.enable = true;
hardware.bluetooth.enable = true; # enables support for Bluetooth
hardware.bluetooth.package = pkgs.bluez;
hardware.bluetooth.input.General.ClassicBondedOnly = false;
services.blueman.enable = true;
  hardware.bluetooth.powerOnBoot = true; 
      boot = {
        loader = {
          systemd-boot.enable = false;
          grub = {
            enable = true;
            device = "nodev";
            useOSProber = true;
            efiSupport = true;
          };
          efi = {
            canTouchEfiVariables = true;
            efiSysMountPoint = "/boot/efi";
          };
        };
        kernelPackages = pkgs.linuxPackages_latest;
      };

      time.timeZone = "America/Los_Angeles";
      i18n.defaultLocale = "en_US.UTF-8";

      services = {
        xserver.enable = true;
        pipewire = {
          enable = true;
          alsa.enable = true;
          alsa.support32Bit = true;
          pulse.enable = true;
        };
      };

      programs = {
        hyprland = {
          enable = true;
          xwayland.enable = true;
        };
        zsh.enable = true;
      };
      virtualisation.docker.enable = true;

      users.users.${config.username} = {
        # Access username option
        isNormalUser = true;
        extraGroups = [
          "wheel"
          "input"
          "network"
          "dialout"
          "docker"
          "networkmanager"
        ];
        shell = pkgs.zsh;
      };
      users.defaultUserShell = pkgs.zsh;

      nix.settings.experimental-features = [
        "nix-command"
        "flakes"
      ];
      nixpkgs.config.allowUnfree = true;
      hardware.pulseaudio.enable = false;
      security = {
        rtkit.enable = true;
        polkit.enable = true;
      };

      fonts.packages = with pkgs; [
        font-awesome
        noto-fonts-cjk-sans
        nerd-fonts.fira-code

      ];

      services.openssh.enable = true;
      networking.firewall.allowedUDPPorts = [ 51820 ];

      environment.systemPackages = basePackages;

      system.stateVersion = "24.05";
    }

    # Desktop-specific configuration
    (lib.mkIf (config.machine == "desktop") {
      # Access machine option
      services.greetd = {
        enable = true;
        settings = {
          initial_session = {
            command = "${session}";
            user = "${config.username}"; # Access username option
          };
          default_session = {
            command = "${tuigreet} --greeting 'Welcome to Desktop' --asterisks --remember --remember-user-session --time -d -cmd Hyprland";
            user = "greeter";
          };
        };
      };
programs.steam = {
  enable = true;
  remotePlay.openFirewall = true; # Open ports in the firewall for Steam Remote Play
  dedicatedServer.openFirewall = true; # Open ports in the firewall for Source Dedicated Server
  localNetworkGameTransfers.openFirewall = true; # Open ports in the firewall for Steam Local Network Game Transfers
};

      # services.xserver.enable = true;
      # services.displayManager.sddm.enable = true;
      # services.desktopManager.plasma6.enable = true;
      networking.interfaces = {
        enp8s0 = {
          wakeOnLan.enable = true;
          useDHCP = true;
        };
      };

      environment.systemPackages = desktopPackages;
    })

    # Laptop-specific configuration
    (lib.mkIf (config.machine == "laptop") {
      # Access machine option
      services = {
        displayManager.sddm = {
          enable = true;
          theme = "catppuccin-sddm-corners";
        };
        power-profiles-daemon.enable = true;
        libinput.enable = true;
      };

      environment.systemPackages = laptopPackages;
    })
  ];
}

================
File: .gitignore
================
# hardware-configuration.nix

================
File: configuration.nix
================
# Edit this configuration file to define what should be installed on
# your system. Help is available in the configuration.nix(5) man page, on
# https://search.nixos.org/options and in the NixOS manual (`nixos-help`).

{ config, lib, pkgs, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
    ];

  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  # networking.hostName = "nixos"; # Define your hostname.
  # Pick only one of the below networking options.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.
  # networking.networkmanager.enable = true;  # Easiest to use and most distros use this by default.

  # Set your time zone.
  # time.timeZone = "Europe/Amsterdam";

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Select internationalisation properties.
  # i18n.defaultLocale = "en_US.UTF-8";
  # console = {
  #   font = "Lat2-Terminus16";
  #   keyMap = "us";
  #   useXkbConfig = true; # use xkb.options in tty.
  # };

  # Enable the X11 windowing system.
  services.xserver.enable = true;


  

  # Configure keymap in X11
  # services.xserver.xkb.layout = "us";
  # services.xserver.xkb.options = "eurosign:e,caps:escape";

  # Enable CUPS to print documents.
  # services.printing.enable = true;

  # Enable sound.
  # hardware.pulseaudio.enable = true;
  # OR
  # services.pipewire = {
  #   enable = true;
  #   pulse.enable = true;
  # };

  # Enable touchpad support (enabled default in most desktopManager).
  # services.libinput.enable = true;

  # Define a user account. Don't forget to set a password with ‘passwd’.
  # users.users.alice = {
  #   isNormalUser = true;
  #   extraGroups = [ "wheel" ]; # Enable ‘sudo’ for the user.
  #   packages = with pkgs; [
  #     tree
  #   ];
  # };

  # programs.firefox.enable = true;

  # List packages installed in system profile. To search, run:
  # $ nix search wget
  # environment.systemPackages = with pkgs; [
  #   vim # Do not forget to add an editor to edit configuration.nix! The Nano editor is also installed by default.
  #   wget
  # ];

  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  # programs.mtr.enable = true;
  # programs.gnupg.agent = {
  #   enable = true;
  #   enableSSHSupport = true;
  # };

  # List services that you want to enable:

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  # Open ports in the firewall.
  # networking.firewall.allowedTCPPorts = [ ... ];
  # networking.firewall.allowedUDPPorts = [ ... ];
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # Copy the NixOS configuration file and link it from the resulting system
  # (/run/current-system/configuration.nix). This is useful in case you
  # accidentally delete configuration.nix.
  # system.copySystemConfiguration = true;

  # This option defines the first version of NixOS you have installed on this particular machine,
  # and is used to maintain compatibility with application data (e.g. databases) created on older NixOS versions.
  #
  # Most users should NEVER change this value after the initial install, for any reason,
  # even if you've upgraded your system to a new NixOS release.
  #
  # This value does NOT affect the Nixpkgs version your packages and OS are pulled from,
  # so changing it will NOT upgrade your system - see https://nixos.org/manual/nixos/stable/#sec-upgrading for how
  # to actually do that.
  #
  # This value being lower than the current NixOS release does NOT mean your system is
  # out of date, out of support, or vulnerable.
  #
  # Do NOT change this value unless you have manually inspected all the changes it would make to your configuration,
  # and migrated your data accordingly.
  #
  # For more information, see `man configuration.nix` or https://nixos.org/manual/nixos/stable/options#opt-system.stateVersion .
  system.stateVersion = "25.05"; # Did you read the comment?

}

================
File: flake.lock
================
{
  "nodes": {
    "flake-compat": {
      "flake": false,
      "locked": {
        "lastModified": 1733328505,
        "narHash": "sha256-NeCCThCEP3eCl2l/+27kNNK7QrwZB1IJCrXfrbv5oqU=",
        "owner": "edolstra",
        "repo": "flake-compat",
        "rev": "ff81ac966bb2cae68946d5ed5fc4994f96d0ffec",
        "type": "github"
      },
      "original": {
        "owner": "edolstra",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "flake-compat_2": {
      "flake": false,
      "locked": {
        "lastModified": 1733328505,
        "narHash": "sha256-NeCCThCEP3eCl2l/+27kNNK7QrwZB1IJCrXfrbv5oqU=",
        "owner": "edolstra",
        "repo": "flake-compat",
        "rev": "ff81ac966bb2cae68946d5ed5fc4994f96d0ffec",
        "type": "github"
      },
      "original": {
        "owner": "edolstra",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "flake-parts": {
      "inputs": {
        "nixpkgs-lib": [
          "nix",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1733312601,
        "narHash": "sha256-4pDvzqnegAfRkPwO3wmwBhVi/Sye1mzps0zHWYnP88c=",
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "rev": "205b12d8b7cd4802fbcb8e8ef6a0f1408781a4f9",
        "type": "github"
      },
      "original": {
        "owner": "hercules-ci",
        "repo": "flake-parts",
        "type": "github"
      }
    },
    "flake-utils": {
      "inputs": {
        "systems": "systems"
      },
      "locked": {
        "lastModified": 1731533236,
        "narHash": "sha256-l0KFg5HjrsfsO/JpG+r7fRrqm12kzFHyUHqHCVpMMbI=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "11707dc2f618dd54ca8739b309ec4fc024de578b",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "ghostty": {
      "inputs": {
        "flake-compat": "flake-compat",
        "flake-utils": "flake-utils",
        "nixpkgs-stable": "nixpkgs-stable",
        "nixpkgs-unstable": "nixpkgs-unstable",
        "zig": "zig",
        "zig2nix": "zig2nix"
      },
      "locked": {
        "lastModified": 1740522536,
        "narHash": "sha256-PdtWmyCBKEUXooecUTKtZSALRQ0jqh5e9MyyIegX5NQ=",
        "owner": "ghostty-org",
        "repo": "ghostty",
        "rev": "4e5e4a7c2fe7ba148566dfb84cf546dfc26980d2",
        "type": "github"
      },
      "original": {
        "owner": "ghostty-org",
        "repo": "ghostty",
        "type": "github"
      }
    },
    "git-hooks-nix": {
      "inputs": {
        "flake-compat": [
          "nix"
        ],
        "gitignore": [
          "nix"
        ],
        "nixpkgs": [
          "nix",
          "nixpkgs"
        ],
        "nixpkgs-stable": [
          "nix",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1734279981,
        "narHash": "sha256-NdaCraHPp8iYMWzdXAt5Nv6sA3MUzlCiGiR586TCwo0=",
        "owner": "cachix",
        "repo": "git-hooks.nix",
        "rev": "aa9f40c906904ebd83da78e7f328cd8aeaeae785",
        "type": "github"
      },
      "original": {
        "owner": "cachix",
        "repo": "git-hooks.nix",
        "type": "github"
      }
    },
    "home-manager": {
      "inputs": {
        "nixpkgs": "nixpkgs"
      },
      "locked": {
        "lastModified": 1740494361,
        "narHash": "sha256-Dd/GhJ9qKmUwuhgt/PAROG8J6YdU2ZjtJI9SQX5sVQI=",
        "owner": "nix-community",
        "repo": "home-manager",
        "rev": "74f0a8546e3f2458c870cf90fc4b38ac1f498b17",
        "type": "github"
      },
      "original": {
        "owner": "nix-community",
        "ref": "master",
        "repo": "home-manager",
        "type": "github"
      }
    },
    "nix": {
      "inputs": {
        "flake-compat": "flake-compat_2",
        "flake-parts": "flake-parts",
        "git-hooks-nix": "git-hooks-nix",
        "nixpkgs": "nixpkgs_2",
        "nixpkgs-23-11": "nixpkgs-23-11",
        "nixpkgs-regression": "nixpkgs-regression"
      },
      "locked": {
        "lastModified": 1740510906,
        "narHash": "sha256-xA+qZSUOELEQeoI5wTqoqq/qht2B11ZvusxdoTcoSjQ=",
        "owner": "NixOS",
        "repo": "nix",
        "rev": "81834e7f0076912196560644f7e6c373f252f483",
        "type": "github"
      },
      "original": {
        "id": "nix",
        "type": "indirect"
      }
    },
    "nixos-hardware": {
      "locked": {
        "lastModified": 1740387674,
        "narHash": "sha256-pGk/aA0EBvI6o4DeuZsr05Ig/r4uMlSaf5EWUZEWM10=",
        "owner": "NixOS",
        "repo": "nixos-hardware",
        "rev": "d58f642ddb23320965b27beb0beba7236e9117b5",
        "type": "github"
      },
      "original": {
        "id": "nixos-hardware",
        "type": "indirect"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1739736696,
        "narHash": "sha256-zON2GNBkzsIyALlOCFiEBcIjI4w38GYOb+P+R4S8Jsw=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "d74a2335ac9c133d6bbec9fc98d91a77f1604c1f",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs-23-11": {
      "locked": {
        "lastModified": 1717159533,
        "narHash": "sha256-oamiKNfr2MS6yH64rUn99mIZjc45nGJlj9eGth/3Xuw=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "a62e6edd6d5e1fa0329b8653c801147986f8d446",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "a62e6edd6d5e1fa0329b8653c801147986f8d446",
        "type": "github"
      }
    },
    "nixpkgs-regression": {
      "locked": {
        "lastModified": 1643052045,
        "narHash": "sha256-uGJ0VXIhWKGXxkeNnq4TvV3CIOkUJ3PAoLZ3HMzNVMw=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "215d4d0fd80ca5163643b03a33fde804a29cc1e2",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "215d4d0fd80ca5163643b03a33fde804a29cc1e2",
        "type": "github"
      }
    },
    "nixpkgs-stable": {
      "locked": {
        "lastModified": 1738255539,
        "narHash": "sha256-hP2eOqhIO/OILW+3moNWO4GtdJFYCqAe9yJZgvlCoDQ=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "c3511a3b53b482aa7547c9d1626fd7310c1de1c5",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "release-24.11",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs-unstable": {
      "locked": {
        "lastModified": 1738136902,
        "narHash": "sha256-pUvLijVGARw4u793APze3j6mU1Zwdtz7hGkGGkD87qw=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "9a5db3142ce450045840cc8d832b13b8a2018e0c",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixpkgs-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_2": {
      "locked": {
        "lastModified": 1734359947,
        "narHash": "sha256-1Noao/H+N8nFB4Beoy8fgwrcOQLVm9o4zKW1ODaqK9E=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "48d12d5e70ee91fe8481378e540433a7303dbf6a",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "release-24.11",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "nixpkgs_3": {
      "locked": {
        "lastModified": 1740367490,
        "narHash": "sha256-WGaHVAjcrv+Cun7zPlI41SerRtfknGQap281+AakSAw=",
        "owner": "NixOS",
        "repo": "nixpkgs",
        "rev": "0196c0175e9191c474c26ab5548db27ef5d34b05",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "root": {
      "inputs": {
        "ghostty": "ghostty",
        "home-manager": "home-manager",
        "nix": "nix",
        "nixos-hardware": "nixos-hardware",
        "nixpkgs": "nixpkgs_3"
      }
    },
    "systems": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    },
    "zig": {
      "inputs": {
        "flake-compat": [
          "ghostty"
        ],
        "flake-utils": [
          "ghostty",
          "flake-utils"
        ],
        "nixpkgs": [
          "ghostty",
          "nixpkgs-stable"
        ]
      },
      "locked": {
        "lastModified": 1738239110,
        "narHash": "sha256-Y5i9mQ++dyIQr+zEPNy+KIbc5wjPmfllBrag3cHZgcE=",
        "owner": "mitchellh",
        "repo": "zig-overlay",
        "rev": "1a8fb6f3a04724519436355564b95fce5e272504",
        "type": "github"
      },
      "original": {
        "owner": "mitchellh",
        "repo": "zig-overlay",
        "type": "github"
      }
    },
    "zig2nix": {
      "inputs": {
        "flake-utils": [
          "ghostty",
          "flake-utils"
        ],
        "nixpkgs": [
          "ghostty",
          "nixpkgs-stable"
        ]
      },
      "locked": {
        "lastModified": 1738263917,
        "narHash": "sha256-j/3fwe2pEOquHabP/puljOKwAZFjIE9gXZqA91sC48M=",
        "owner": "jcollie",
        "repo": "zig2nix",
        "rev": "c311d8e77a6ee0d995f40a6e10a89a3a4ab04f9a",
        "type": "github"
      },
      "original": {
        "owner": "jcollie",
        "ref": "c311d8e77a6ee0d995f40a6e10a89a3a4ab04f9a",
        "repo": "zig2nix",
        "type": "github"
      }
    }
  },
  "root": "root",
  "version": 7
}

================
File: flake.nix
================
{
  description = "PJalv";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    home-manager.url = "github:nix-community/home-manager/master";
    ghostty.url = "github:ghostty-org/ghostty";
  };

  outputs =
    {
      ghostty,
      self,
      nixpkgs,
      nix,
      nixos-hardware,
      home-manager,
    }:
    {

      nixosConfigurations = {
        pjalv-desktop = nixpkgs.lib.nixosSystem {
          system = "x86_64-linux";
          modules = [
            {
              environment.systemPackages = [
                ghostty.packages.x86_64-linux.default
              ];
            }
            ./users/pjalv/user.nix
            home-manager.nixosModules.home-manager
            {
              home-manager.useUserPackages = true;
              home-manager.users.pjalv = import ./users/pjalv/hm.nix;
            }
          ];
        };
        pjalv-laptop = nixpkgs.lib.nixosSystem {
          system = "x86_64-linux";
          modules = [
            {
              environment.systemPackages = [
                ghostty.packages.x86_64-linux.default
              ];
            }
            ./users/pjalv/user.nix
            home-manager.nixosModules.home-manager
            {
              home-manager.useUserPackages = true;
              home-manager.users.pjalv = import ./users/pjalv/hm.nix;
            }
          ];
        };
      };
    };
}

================
File: hardware-configuration.nix
================
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  modulesPath,
  ...
}:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = [
    "nvme"
    "xhci_pci"
    "rtsx_pci_sdmmc"
    "usbhid"
    "joydev"
    "xpad"
  ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/820470a8-d510-45b9-9f6b-34ee74bba3ff";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/BD68-D7C4";
    fsType = "vfat";
    options = [
      "fmask=0022"
      "dmask=0022"
    ];
  };

  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/8e179950-080c-472f-af5f-2af1e6c6ee4a";
    fsType = "btrfs";
  };

  fileSystems."/mnt" = {
    device = "/dev/sda1";
    fsType = "exfat";
  };

  fileSystems."/mnt" = {
    device = "/dev/sdb1";
    fsType = "exfat";
  };

  swapDevices = [
    { device = "/dev/disk/by-uuid/44ccc7a9-7ef0-40dc-b28f-29bf9fd68f6e"; }
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp1s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}

================
File: update.sh
================
# Add NixOS unstable channel
sudo nix-channel --add https://nixos.org/channels/nixos-unstable nixos

# Add Home Manager master channel
nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager

# Update both channels
sudo nix-channel --update



================================================================
End of Codebase
================================================================
