This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: *.lock
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
hm/
  dots/
    starship.toml
  entries.nix
  ghostty.nix
  gtk.nix
  hyprland.nix
  kitty.nix
  macropad.nix
  rofi.nix
  spicetify.nix
  starship.nix
  waybar.nix
  zsh.nix
users/
  pjalv/
    desktop/
      hardware-configuration.nix
    laptop/
      hardware-configuration.nix
    hm.nix
    user.nix
  remote/
    hm.nix
.gitignore
flake.nix
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# hardware-configuration.nix
</file>

<file path="hm/entries.nix">
{ ... }: {

  xdg.desktopEntries = {
    stm32cubemx = {
      name = "STM32CubeMX";
      genericName = "STM32CubeMX";
      exec = "stm32cubemx";
      terminal = false;
      categories = [ "Application" ];
    };
  };

}
</file>

<file path="hm/ghostty.nix">
{ pkgs, ... }: {

  xdg.configFile."ghostty/config".text = ''
    font-family = FiraCode Nerd Font Mono
    font-size = 12.5
    window-padding-color = extend
    background-opacity = 0.94 
    unfocused-split-opacity = 0.90 
    theme = catppuccin-mocha
    window-theme = ghostty
    window-decoration = false



    gtk-titlebar = false
    gtk-tabs-location = bottom
    confirm-close-surface = false

    keybind = ctrl+shift+j=scroll_page_fractional:0.7
    keybind = ctrl+shift+k=scroll_page_fractional:-0.7

    keybind = alt+shift+h=previous_tab
    keybind = alt+shift+l=next_tab

  '';
  xdg.configFile."gtk-4.0/gtk.css".text = ''
    /*
    debug: env GTK_DEBUG=interactive ghostty
    https://docs.gtk.org/gtk4/css-overview.html
    https://docs.gtk.org/gtk4/css-properties.html
    */
    tabbar tabbox {
      margin: 0px;
      padding: 0px;
      min-height: 10px;
      background-color: #1a1a1a;
      font-family: monospace;
    }

    tabbar tabbox tab {
      margin: 0px;
      padding: 0px;
      color: #9ca3af;
      border-right: 1px solid #374151;
    }
    window > box > tabbar > revealer > box {
      margin: 0px;
    }

    tabbar tabbox tab.active {
      background-color: #2d2d2d;
      color: #ffffff;
    }

    tabbar tabbox tab label {
     font-size: 13px;
    }
    tabbar {background-color: #0a0a0aC9} RGB+opacity
  '';
}
</file>

<file path="hm/gtk.nix">
{ pkgs, ... }: {
  gtk = {
    enable = true;
    # theme = {
    #   name = "Tokyonight-Dark";
    #   package = pkgs.tokyonight-gtk-theme;
    #
    # };

    font = {
      name = "Nunito";
      size = 10;
    };

    iconTheme = {
      name = "Papirus-Dark";
      package = pkgs.papirus-icon-theme;
    };

    gtk3.extraConfig = {
      gtk-xft-antialias = 1;
      gtk-xft-hinting = 1;
      gtk-xft-hintstyle = "hintslight";
      gtk-xft-rgba = "rgb";
      gtk-application-prefer-dark-theme = 1;
    };

    gtk2.extraConfig = ''
      gtk-xft-antialias=1
      gtk-xft-hinting=1
      gtk-xft-hintstyle="hintslight"
      gtk-xft-rgba="rgb"
      gtk-application-prefer-dark-theme=1
    '';

    cursorTheme = {
      name = "catppuccin-macchiato-dark-cursors";
      package = pkgs.catppuccin-cursors.macchiatoDark;
    };
  };
}
</file>

<file path="hm/kitty.nix">
{ pkgs, ... }: {
  programs.kitty = {
    enable = true;

    theme = "Catppuccin-Mocha";

    font = {
      name = "FiraCode Nerd Font";
      size = 11;
    };

    settings = {
      confirm_os_window_close = 1;
      background_opacity = "0.94";
      scrollback_lines = 10000;
      enable_audio_bell = false;
      mouse_hide_wait = 60;

      ## Tabs
      tab_title_template = "{index}";
      active_tab_font_style = "normal";
      inactive_tab_font_style = "normal";
      tab_bar_style = "powerline";
      tab_powerline_style = "angled";
      active_tab_foreground = "#FBF1C7";
      active_tab_background = "#7C6F64";
      inactive_tab_foreground = "#FBF1C7";
      inactive_tab_background = "#3C3836";
    };

    keybindings = {
      ## Tabs
      "shift+alt+h" = "previous_tab";
      "shift+alt+l" = "next_tab";

      ## Unbind
      "ctrl+shift+left" = "no_op";
      "ctrl+shift+right" = "no_op";
    };
  };
}
</file>

<file path="hm/rofi.nix">
{ pkgs, ... }: {
  home.packages = (with pkgs; [ rofi-wayland ]);

  xdg.configFile."rofi/catppuccin-frappe.rasi".text = ''
      * {
        bg-col:  #303446;
        bg-col-light: #303446;
        border-col: #303446;
        selected-col: #303446;
        blue: #8caaee;
        fg-col: #c6d0f5;
        fg-col2: #e78284;
        grey: #737994;

        width: 600;
        font: "JetBrainsMono Nerd Font 14";
    }

    element-text, element-icon , mode-switcher {
        background-color: inherit;
        text-color:       inherit;
    }

    window {
        height: 360px;
        border: 3px;
        border-color: @border-col;
        background-color: @bg-col;
    }

    mainbox {
        background-color: @bg-col;
    }

    inputbar {
        children: [prompt,entry];
        background-color: @bg-col;
        border-radius: 5px;
        padding: 2px;
    }

    prompt {
        background-color: @blue;
        padding: 6px;
        text-color: @bg-col;
        border-radius: 3px;
        margin: 20px 0px 0px 20px;
    }

    textbox-prompt-colon {
        expand: false;
        str: ":";
    }

    entry {
        padding: 6px;
        margin: 20px 0px 0px 10px;
        text-color: @fg-col;
        background-color: @bg-col;
    }

    listview {
        border: 0px 0px 0px;
        padding: 6px 0px 0px;
        margin: 10px 0px 0px 20px;
        columns: 2;
        lines: 5;
        background-color: @bg-col;
    }

    element {
        padding: 5px;
        background-color: @bg-col;
        text-color: @fg-col  ;
    }

    element-icon {
        size: 25px;
    }

    element selected {
        background-color:  @selected-col ;
        text-color: @fg-col2  ;
    }

    mode-switcher {
        spacing: 0;
      }

    button {
        padding: 10px;
        background-color: @bg-col-light;
        text-color: @grey;
        vertical-align: 0.5; 
        horizontal-align: 0.5;
    }

    button selected {
      background-color: @bg-col;
      text-color: @blue;
    }

    message {
        background-color: @bg-col-light;
        margin: 2px;
        padding: 2px;
        border-radius: 5px;
    }

    textbox {
        padding: 6px;
        margin: 20px 0px 0px 20px;
        text-color: @blue;
        background-color: @bg-col-light;
    }
  '';

  xdg.configFile."rofi/config.rasi".text = ''
      configuration{
        modi: "run,drun,window";
        icon-theme: "Oranchelo";
        show-icons: true;
        terminal: "alacritty";
        drun-display-format: "{icon} {name}";
        location: 0;
        disable-history: false;
        hide-scrollbar: true;
        display-drun: "   Apps ";
        display-run: "   Run ";
        display-window: " 﩯  Window";
        display-Network: " 󰤨  Network";
        sidebar-mode: true;
    }

    @theme "catppuccin-frappe"


    #window {
     border-radius: 10px;
    } 
  '';
}
</file>

<file path="hm/starship.nix">
{ config, pkgs, ... }: {
  home.sessionVariables.STARSHIP_CACHE = "${config.xdg.cacheHome}/starship";

  programs.starship = {

    enable = true;
    enableZshIntegration = true;
    settings = pkgs.lib.importTOML ./dots/starship.toml;

  };

}
</file>

<file path="users/pjalv/desktop/hardware-configuration.nix">
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports = [ (modulesPath + "/installer/scan/not-detected.nix") ];

  boot.initrd.availableKernelModules =
    [ "nvme" "xhci_pci" "ahci" "usbhid" "sd_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/c3488a2b-4cde-4191-b9e6-db2c814d8297";
    fsType = "btrfs";
  };

  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/4af21ee2-2892-4d6b-aeba-1a397b1eb84f";
    fsType = "btrfs";
  };

  fileSystems."/boot/efi" = {
    device = "/dev/disk/by-uuid/706B-4734";
    fsType = "vfat";
    options = [ "fmask=0022" "dmask=0022" ];
  };

  swapDevices =
    [{ device = "/dev/disk/by-uuid/168c33e3-b59e-43ca-9ba5-9cb5dde2e361"; }];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp8s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode =
    lib.mkDefault config.hardware.enableRedistributableFirmware;
}
</file>

<file path="README.md">
# NixOS Configuration for User `pjalv`

Welcome to the NixOS configuration repository for user **`pjalv`**. This repository contains the system configurations, Home Manager settings, and dotfiles tailored for both desktop and laptop setups. It's designed to provide a cohesive and modular approach to managing NixOS systems using flakes.

## Table of Contents

- [Overview](#overview)
- [Features](#features)
- [Getting Started](#getting-started)
  - [Prerequisites](#prerequisites)
  - [Installation](#installation)
- [Directory Structure](#directory-structure)
- [Key Components](#key-components)
  - [Flakes](#flakes)
  - [Home Manager](#home-manager)
  - [Hyprland Window Manager](#hyprland-window-manager)
  - [Ghostty Terminal](#ghostty-terminal)
  - [Wayland and Waybar](#wayland-and-waybar)
  - [Zsh Configuration](#zsh-configuration)
  - [Additional Tools](#additional-tools)
- [Usage](#usage)
- [Updating the System](#updating-the-system)
- [Contributing](#contributing)
- [License](#license)

---

## Overview

This repository serves as a comprehensive NixOS configuration for both desktop and laptop environments under the user `pjalv`. It leverages the power of Nix flakes for reproducible builds and Home Manager for user-specific configurations.

By organizing configurations into reusable modules, this setup allows for easy customization and scalability, catering to different machines while maintaining a shared base configuration.

## Features

- **Modular Configuration**: Separate configurations for desktop and laptop with shared modules.
- **Flake Support**: Uses Nix flakes for modern and reproducible Nix expressions.
- **Home Manager Integration**: Manages user-specific settings and dotfiles.
- **Hyprland Window Manager**: Configured for a tiling Wayland compositor.
- **Custom Terminal and Shell**: Includes configurations for Ghostty terminal and Zsh with Powerlevel10k theme.
- **Wayland Support**: Waybar and other Wayland-specific configurations.
- **Package Management**: Manages system and user packages declaratively.

## Getting Started

### Prerequisites

- **Nix Package Manager**: Ensure Nix is installed on your system.
- **NixOS**: This configuration is intended for NixOS installations.
- **Flakes Enabled**: Flakes must be enabled in your Nix configuration.

To enable flakes, add the following to your `/etc/nix/nix.conf`:

```nix
experimental-features = nix-command flakes
```

### Installation

1. **Clone the Repository**:

   ```bash
   git clone https://github.com/PJalv/nixos-config.git
   cd nixos-config
   ```

2. **Switch to Configuration**:

   Use the NixOS `flake` command to switch to the desired configuration.

   For **desktop**:

   ```bash
   sudo nixos-rebuild switch --flake .#pjalv-desktop
   ```

   For **laptop**:

   ```bash
   sudo nixos-rebuild switch --flake .#pjalv-laptop
   ```

3. **Set User Password**:

   After the rebuild, set the password for the user `pjalv` if not already set:

   ```bash
   sudo passwd pjalv
   ```

## Directory Structure

```
├── users/
│   └── pjalv/
│       ├── desktop/
│       │   └── hardware-configuration.nix
│       ├── laptop/
│       │   └── hardware-configuration.nix
│       ├── hm/
│       │   ├── dots/
│       │   │   └── starship.toml
│       │   ├── entries.nix
│       │   ├── ghostty.nix
│       │   ├── gtk.nix
│       │   ├── hyprland.nix
│       │   ├── kitty.nix
│       │   ├── macropad.nix
│       │   ├── rofi.nix
│       │   ├── starship.nix
│       │   ├── waybar.nix
│       │   └── zsh.nix
│       ├── hm.nix
│       ├── misc.nix
│       ├── test.nix
│       └── user.nix
├── .gitignore
├── configuration.nix
├── flake.nix
├── flake.lock
├── hardware-configuration.nix
└── update.sh
```

- **users/**: Contains user-specific configurations.
  - **pjalv/**: Configurations for the user `pjalv`.
    - **desktop/** and **laptop/**: Hardware configurations for respective machines.
    - **hm/**: Home Manager modules and dotfiles.
    - **hm.nix**: Home Manager entry point.
    - **user.nix**: Primary NixOS configuration module for the user.

- **configuration.nix**: Entry point for NixOS configuration (default, may be overridden by flakes).
- **flake.nix**: Defines the flake with NixOS configurations.
- **update.sh**: Script to update Nix channels (deprecated with flakes).

## Key Components

### Flakes

The configuration uses Nix flakes for reproducibility and ease of managing dependencies. The `flake.nix` file defines the outputs, including NixOS configurations for desktop and laptop:

```nix
{
  description = "PJalv";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    home-manager.url = "github:nix-community/home-manager/master";
    ghostty.url = "github:ghostty-org/ghostty";
  };

  outputs = { ... }:
  {
    nixosConfigurations = {
      pjalv-desktop = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        modules = [
          ./users/pjalv/user.nix
          home-manager.nixosModules.home-manager
          # Additional modules...
        ];
      };
      # Similar for pjalv-laptop...
    };
  };
}
```

### Home Manager

Home Manager is used to manage user-specific configurations and dotfiles declaratively. The entry point is `hm.nix`:

```nix
{ config, pkgs, ... }:

{
  imports = [
    ./hm/zsh.nix
    ./hm/rofi.nix
    ./hm/hyprland.nix
    # Additional modules...
  ];
}
```

### Hyprland Window Manager

[Hyprland](https://hyprland.org/) is configured as the window manager. The module `hyprland.nix` sets up the environment, keybindings, and aesthetics.

Features include:

- Custom keybindings using `$mainMod` (typically `ALT`).
- Workspace management.
- Gestures and touchpad settings.
- Integration with Wayland-specific applications.

### Ghostty Terminal

[Ghostty](https://github.com/ghostty-org/ghostty) is a fast and minimal terminal emulator. Configuration is in `ghostty.nix`, which sets custom styles, fonts, and behavior.

Key settings:

- Font: FiraCode Nerd Font Mono
- Background opacity and theme.
- Custom keybindings for scrolling and tab navigation.

### Wayland and Waybar

Support for Wayland compositors and the status bar [Waybar](https://github.com/Alexays/Waybar) is included. The `waybar.nix` module configures the modules, style, and custom scripts.

Highlights:

- Modules for CPU, memory, network, battery, and media controls.
- Custom styling using Catppuccin theme.
- Integration with Hyprland and media players.

### Zsh Configuration

The `zsh.nix` module sets up Zsh with plugins and themes:

- **Plugins**:
  - `fzf-tab`: Enhanced tab completion.
  - `powerlevel10k`: A fast and customizable theme.
- **Features**:
  - Syntax highlighting.
  - Autosuggestions.
  - Custom keybindings and aliases.

### Additional Tools

- **Macropad**: Custom Go-based macro pad tool (`macropad.nix`).
- **Entry Points**: Application entries configured via `entries.nix`.
- **Dotfiles**: Managed under `dots/` for easy portability.

## Usage

- **Switching Configurations**: Use the `nixos-rebuild` command with flakes to switch between desktop and laptop configurations.
- **Home Manager**: Manage user environments declaratively. Changes in `hm.nix` and its modules can be applied with:

  ```bash
  home-manager switch
  ```

- **Custom Scripts**: Some modules reference custom scripts located in external repositories (e.g., dotfiles). Ensure these are fetched or adjust paths accordingly.

## Updating the System

To update the NixOS system and flakes:

1. **Pull Latest Changes**:

   ```bash
   git pull
   ```

2. **Update Flake Inputs**:

   ```bash
   nix flake update
   ```

3. **Rebuild System**:

   ```bash
   sudo nixos-rebuild switch --flake .#pjalv-desktop
   ```

   Replace `pjalv-desktop` with `pjalv-laptop` if applicable.

## Contributing

Contributions are welcome! Feel free to open issues or submit pull requests. When contributing, please follow the existing code style and structure.

## License

This project is licensed under the [MIT License](LICENSE). You are free to use, modify, and distribute this software.

---

Thank you for exploring this NixOS configuration. If you have any questions or need assistance, feel free to reach out!
</file>

<file path="hm/dots/starship.toml">
# version: 1.0.0
format = """
$hostname
$nix_shell\
$directory\
$git_branch\
$git_status\
$cmd_duration\
$bun\
$buf\
$cmake\
$cobol\
$crystal\
$daml\
$dart\
$deno\
$dotnet\
$elixir\
$elm\
$erlang\
$fennel\
$gleam\
$golang\
$gradle\
$haxe\
$helm\
$java\
$julia\
$kotlin\
$lua\
$meson\
$nim\
$nodejs\
$ocaml\
$opa\
$perl\
$php\
$pulumi\
$purescript\
$python\
$quarto\
$raku\
$red\
$rlang\
$ruby\
$rust\
$solidity\
$typst\
$swift\
$vagrant\
$vlang\
$zig\
$line_break\
$character
"""

add_newline = true
continuation_prompt = "[▸▹ ](dimmed white)"

[hostname]
ssh_only = true
format = "[$hostname]($style)"
trim_at = "-"
style = "bold dimmed white"
disabled = false

[nix_shell]
impure_msg = '[impure](bold red)'
pure_msg = '[pure](bold green)'
unknown_msg = '[unknown](bold yellow)'
format = '[ $state ](bold blue)'

[battery]
disabled = true

[directory]
truncate_to_repo = false
fish_style_pwd_dir_length = 1

[bun]
format = "via [$symbol]($style)"
[buf]
format = "via [$symbol]($style)"
[c]
format = 'via [$name $version]($style)'
[cmake]
format = "via [$symbol]($style)"
[cobol]
format = "via [$symbol]($style)"
[crystal]
format = "via [$symbol]($style)"
[daml]
format = "via [$symbol]($style)"
[dart]
format = "via [$symbol]($style)"
[deno]
format = "via [$symbol]($style)"
[dotnet]
format = "[$symbol(🎯 $tfm )]($style)"
[elixir]
format = 'via [$symbol]($style)'
[elm]
format = 'via [$symbol]($style)'
[erlang]
format = 'via [$symbol]($style)'
[fennel]
format = 'via [$symbol]($style)'
[gleam]
format = 'via [$symbol]($style)'
[golang]
format = 'via [$symbol]($style)'
[gradle]
format = 'via [$symbol]($style)'
[haxe]
format = 'via [$symbol]($style)'
[helm]
format = 'via [$symbol]($style)'
[java]
format = 'via [$symbol]($style)'
[julia]
format = 'via [$symbol]($style)'
[kotlin]
format = 'via [$symbol]($style)'
[lua]
format = 'via [$symbol]($style)'
[meson]
format = 'via [$symbol]($style)'
[nim]
format = 'via [$symbol]($style)'
[nodejs]
format = 'via [$symbol]($style)'
[ocaml]
format = 'via [$symbol(\($switch_indicator$switch_name\) )]($style)'
[opa]
format = 'via [$symbol]($style)'
[perl]
format = 'via [$symbol]($style)'
[php]
format = 'via [$symbol]($style)'
[pulumi]
format = 'via [$symbol$stack]($style)'
[purescript]
format = 'via [$symbol]($style)'
[python]
format = 'via [${symbol}(${version} )(\($virtualenv\) )]($style)'
[quarto]
format = 'via [$symbol]($style)'
[raku]
format = 'via [$symbol]($style)'
[red]
format = 'via [$symbol]($style)'
[rlang]
format = 'via [$symbol]($style)'
[ruby]
format = 'via [$symbol]($style)'
[rust]
format = 'via [$symbol]($style)'
[solidity]
format = 'via [$symbol]($style)'
[typst]
format = 'via [$symbol]($style)'
[swift]
format = 'via [$symbol]($style)'
[vagrant]
format = 'via [$symbol]($style)'
[vlang]
format = 'via [$symbol]($style)'
[zig]
format = 'via [$symbol]($style)'
</file>

<file path="hm/macropad.nix">
{ pkgs, lib, ... }:

pkgs.buildGoModule rec {
  pname = "macro_go";
  version = "0.1.2";

  src = pkgs.fetchFromGitHub
    {
      owner = "PJalv";
      repo = "macropad";
      rev = "a2503e7f57f34c240763b532f6e3036d333f4c37";
      hash = "sha256-h75Fkw3R8mNdt7imamIpfuzsyYP66BT0Nv5UPAnabRo=";
    } + "/macro_go";

  vendorHash = "sha256-wSrY7GIXYcLh6iuhMKu8gqSsXUWj8CdBvMDgT3bH18o=";
  proxyVendor = true;
  meta = {
    description = "PJalv's Macropad Project";
    homepage = "https://github.com/PJalv/macropad";
    license = lib.licenses.mit;
    maintainers = with lib.maintainers; [ PJalv ];
  };
}
</file>

<file path="hm/zsh.nix">
{ config, pkgs, host, ... }: {
  programs.zsh = {
    enable = true;
    # enableCompletion = true;
    autosuggestion.enable = true;
    syntaxHighlighting.enable = true;

    plugins = [{
      # Must be before plugins that wrap widgets, such as zsh-autosuggestions or fast-syntax-highlighting
      name = "fzf-tab";
      src = "${pkgs.zsh-fzf-tab}/share/fzf-tab";
    }];

    completionInit = ''
      # Load Zsh modules
       zmodload zsh/zle
       zmodload zsh/zpty
       zmodload zsh/complist

      # Initialize colors
      autoload -Uz colors
      colors

      # Initialize completion system
       autoload -U compinit
       compinit
      _comp_options+=(globdots)

      # Load edit-command-line for ZLE
      autoload -Uz edit-command-line
      zle -N edit-command-line
      bindkey "^e" edit-command-line

      # General completion behavior
      zstyle ':completion:*' completer _extensions _complete _approximate

      # Use cache
      zstyle ':completion:*' use-cache on
      zstyle ':completion:*' cache-path "$XDG_CACHE_HOME/zsh/.zcompcache"

      # Complete the alias
      zstyle ':completion:*' complete true

      # Autocomplete options
      zstyle ':completion:*' complete-options true

      # Completion matching control
      zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
      zstyle ':completion:*' keep-prefix true

      # Group matches and describe
      zstyle ':completion:*' menu select
      zstyle ':completion:*' list-grouped false
      zstyle ':completion:*' list-separator '''
      zstyle ':completion:*' group-name '''
      zstyle ':completion:*' verbose yes
      zstyle ':completion:*:matches' group 'yes'
      zstyle ':completion:*:warnings' format '%F{red}%B-- No match for: %d --%b%f'
      zstyle ':completion:*:messages' format '%d'
      zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
      zstyle ':completion:*:descriptions' format '[%d]'

      # Colors
      zstyle ':completion:*' list-colors ''${(s.:.)LS_COLORS}

      # Directories
      zstyle ':completion:*:*:cd:*' tag-order local-directories directory-stack path-directories
      zstyle ':completion:*:*:cd:*:directory-stack' menu yes select
      zstyle ':completion:*:-tilde-:*' group-order 'named-directories' 'path-directories' 'users' 'expand'
      zstyle ':completion:*:*:-command-:*:*' group-order aliases builtins functions commands
      zstyle ':completion:*' special-dirs true
      zstyle ':completion:*' squeeze-slashes true

      # Sort
      zstyle ':completion:*' sort false
      zstyle ":completion:*:git-checkout:*" sort false
      zstyle ':completion:*' file-sort modification
      zstyle ':completion:*:eza' sort false
      zstyle ':completion:complete:*:options' sort false
      zstyle ':completion:files' sort false

      # fzf-tab
      zstyle ':fzf-tab:complete:*:*' fzf-preview 'eza --icons  -a --group-directories-first -1 --color=always $realpath'
      zstyle ':fzf-tab:complete:kill:argument-rest' fzf-preview 'ps --pid=$word -o cmd --no-headers -w -w'
      zstyle ':fzf-tab:complete:kill:argument-rest' fzf-flags '--preview-window=down:3:wrap'
      zstyle ':fzf-tab:*' fzf-command fzf
      zstyle ':fzf-tab:*' fzf-pad 4
      zstyle ':fzf-tab:*' fzf-min-height 100
      zstyle ':fzf-tab:*' switch-group ',' '.'
    '';

    initExtraFirst = ''
      DISABLE_AUTO_UPDATE=true
      DISABLE_MAGIC_FUNCTIONS=true
      export "MICRO_TRUECOLOR=1"

      setopt sharehistory
      setopt hist_ignore_space
      setopt hist_ignore_all_dups
      setopt hist_save_no_dups
      setopt hist_ignore_dups
      setopt hist_find_no_dups
      setopt hist_expire_dups_first
      setopt hist_verify

      load_api_keys() {
          local api_keys_file="$HOME/.api_keys"

          if [[ -f "$api_keys_file" ]]; then
              while IFS= read -r line; do
                  # Skip empty lines and comments
                  [[ -z "$line" || "$line" == \#* ]] && continue

                  # Export each line as an environment variable
                  export "$line"
              done < "$api_keys_file"
          else
              echo "⚠️  Missing .api_keys file"
          fi
      }

      # Use fd (https://github.com/sharkdp/fd) for listing path candidates.
      # - The first argument to the function ($1) is the base path to start traversal
      # - See the source code (completion.{bash,zsh}) for the details.
      _fzf_compgen_path() {
        fd --hidden --exclude .git . "$1"
      }

      # Use fd to generate the list for directory completion
      _fzf_compgen_dir() {
        fd --type=d --hidden --exclude .git . "$1"
      }

      # Advanced customization of fzf options via _fzf_comprun function
      # - The first argument to the function is the name of the command.
      # - You should make sure to pass the rest of the arguments to fzf.
      _fzf_comprun() {
        local command=$1
        shift

        case "$command" in
          cd)           fzf --preview 'eza --tree --color=always {} | head -200' "$@" ;;
          ssh)          fzf --preview 'dig {}'                   "$@" ;;
          *)            fzf --preview "$show_file_or_dir_preview" "$@" ;;
        esac
      }

      # Make sure that the terminal is in application mode when zle is active, since
      # only then values from $terminfo are valid
      if (( ''${+terminfo[smkx]} )) && (( ''${+terminfo[rmkx]} )); then
        function zle-line-init() {
          echoti smkx
        }
        function zle-line-finish() {
          echoti rmkx
        }
        zle -N zle-line-init
        zle -N zle-line-finish
      fi
      precmd_functions+=(load_api_keys)
    '';
    shellAliases = {
      cd = "z";
      ls = "ls --color";
      vim = "nvim";
      c = "clear";

      find_remote =
        "adb exec-out am start -a android.intent.action.VIEW -d -n com.nvidia.remotelocator/.ShieldRemoteLocatorActivity";

      pbc = "wl=copy";
      pbp = "wl-paste";
      nix-shell = "nix-shell --run $SHELL";

      nixedit = "cd /etc/nixos && nvim .";
      nixupdate =
        "git stage . && git commit -m 'Tweak' && sudo nixos-rebuild switch";

    };
  };

  programs.zoxide = {
    enable = true;
    enableZshIntegration = true;
  };
  programs.fzf = {
    enable = true;
    enableZshIntegration = true;
  };

}
</file>

<file path="users/pjalv/laptop/hardware-configuration.nix">
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports = [ (modulesPath + "/installer/scan/not-detected.nix") ];

  boot.initrd.availableKernelModules = [ "nvme" "xhci_pci" "usb_storage" "sd_mod" "rtsx_pci_sdmmc" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/b94248b9-8760-4e99-a9fc-5748367aa3f4";
    fsType = "btrfs";
  };

  fileSystems."/boot" =
    {
      device = "/dev/disk/by-uuid/BD8B-DAE8";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
    };

  fileSystems."/home" =
    {
      device = "/dev/disk/by-uuid/76f20e0d-6e22-474d-a656-563ce73f583f";
      fsType = "btrfs";
    };

  swapDevices =
    [{ device = "/dev/disk/by-uuid/8c5cc452-8058-4528-a2e9-2f9e151fb411"; }];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp4s0f3u2.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp1s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode =
    lib.mkDefault config.hardware.enableRedistributableFirmware;
}
</file>

<file path="users/remote/hm.nix">
{ config, pkgs, lib, username ? "remote", inputs, ... }:
let

in {

  home.username = username;
  home.homeDirectory = "/home/${username}";
  home.packages = with pkgs; [ lazygit zoxide neovim ];

  imports = [ ../../hm/zsh.nix ../../hm/starship.nix ];

  programs.direnv = {
    enable = true;
    enableZshIntegration = true;
    nix-direnv.enable = true;
  };

  programs.git.extraConfig.init.defaultBranch = "main";
  programs.git.extraConfig.pull.rebase = false;
  programs.git = {
    enable = true;
    userName = "PJalv";
    userEmail = "pjalvbusiness@gmail.com";
  };
  programs.gh.enable = true;
  # The state version is required and should stay at the version you
  # originally installed.

  programs.home-manager.enable = true;
  home.sessionVariables = { };
  home.stateVersion = "24.11"; # Please read the comment before changing.

}
</file>

<file path="hm/spicetify.nix">
{ inputs, pkgs, ... }:
let
  # With flakes:
  spicePkgs = inputs.spicetify-nix.legacyPackages.${pkgs.stdenv.system};
in
{
  programs.spicetify = {
    enable = true;
    enabledExtensions = with spicePkgs.extensions; [
      adblockify
      hidePodcasts
      shuffle # shuffle+ (special characters are sanitized out of extension names)
      ({
        src = pkgs.fetchFromGitHub
          {
            owner = "spikerko";
            repo = "spicy-lyrics";
            rev = "71d78660557708bae0b1d68d225a06a72d9c524a";
            hash = "sha256-LuuHtk3ebkPLnbc9qtKm/iN5B2WrtVwNDuRhENLHspM=";
          } + /src;
        name = "app.tsx";

      })
    ];
    theme = spicePkgs.themes.catppuccin;
    alwaysEnableDevTools = true;
    colorScheme = "mocha";
  };
}
</file>

<file path="hm/hyprland.nix">
{ config
, pkgs
, lib
, machine ? "desktop"
, username ? "pjalv"
, ...
}:
{

  wayland.windowManager.hyprland = {
    enable = true;
    settings = {
      # autostart
      exec-once = [
        "copyq --start-server"
        "wl-paste --type text --watch cliphist store # Stores only text data"
        "dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP"
        "wl-paste --type image --watch cliphist store # Stores only image data"
        "mako"
        "macro_go 'chromium' '.spotify-wrapped'"
        "[workspace 1 silent] chromium-browser --autoplay-policy=no-user-gesture-required"
        "sleep 1 && waybar"

      ];

      input = {
        kb_layout = "us";
        kb_options = "caps:swapescape";
        follow_mouse = 2;
        scroll_factor = 3;
        accel_profile = "flat";

        touchpad = { natural_scroll = true; };
        repeat_delay = 250;
        repeat_rate = 50;
      };
      gestures = { workspace_swipe = true; };
      general = {
        "$fileManager" = "thunar";
        "$terminal" = "ghostty";
        "$menu" = "rofi";
        "$mainMod" = "ALT";
        layout = "dwindle";
        gaps_in = 1;
        gaps_out = 0;
        border_size = 1;
        "col.active_border" = "rgba(33ccffee) rgba(00ff99ee) 45deg";
        "col.inactive_border" = "rgba(595959aa)";
      };

      cursor = { inactive_timeout = 5; };
      misc = {
        disable_hyprland_logo = true;
        always_follow_on_dnd = true;
        middle_click_paste = false;
      };

      dwindle = { preserve_split = true; };

      decoration = {
        rounding = 4;
        active_opacity = 1.0;
        inactive_opacity = 1.0;

        blur = {
          enabled = false;
          size = 3;
          passes = 1;
        };
      };

      animations = {
        enabled = true;

        bezier = [ "myBezier, 0.05, 0.9, 0.1, 1.05" ];

        animation = [
          "windows, 1, 7, myBezier"
          "windowsOut, 1, 7, default, popin 80%"
          "border, 1, 10, default"
          "borderangle, 1, 8, default"
          "fade, 1, 7, default"
          "workspaces, 1, 6, default"
        ];
      };

      bind = [
        # show keybinds list
        "$mainMod, F1, exec, show-keybinds"
        "SUPER, v, exec, copyq show"
        # Example binds, see https://wiki.hyprland.org/Configuring/Binds/ for more
        "SUPER, D, exec, vesktop"
        "SUPER, S, exec, spotify"
        "SUPER, period, exec, emote"
        "$mainMod, RETURN, exec, $terminal"
        "$mainMod, Q, killactive,"
        "$mainMod, M, exit,"
        "$mainMod, E, exec, $fileManager"
        "$mainMod, V, togglefloating,"
        "$mainMod, SPACE, exec, $menu -show drun -show-icons"
        "$mainMod, P, pseudo" # dwindle
        "$mainMod, B, togglesplit"

        # Move focus with mainMod + arrow keys
        "$mainMod, h, movefocus, l"
        "$mainMod, l, movefocus, r"
        "$mainMod, k, movefocus, u"
        "$mainMod, j, movefocus, d"

        # Switch workspaces with mainMod + [0-9]
        "$mainMod, 1, workspace, 1"
        "$mainMod, 2, workspace, 2"
        "$mainMod, 3, workspace, 3"
        "$mainMod, 4, workspace, 4"
        "$mainMod, 5, workspace, 5"
        "$mainMod, 6, workspace, 6"
        "$mainMod, 7, workspace, 7"
        "$mainMod, 8, workspace, 8"
        "$mainMod, 9, workspace, 9"
        "$mainMod, 0, workspace, 10"

        # Move active window to a workspace with mainMod + SHIFT + [0-9]
        "$mainMod SHIFT, 1, movetoworkspace, 1"
        "$mainMod SHIFT, 2, movetoworkspace, 2"
        "$mainMod SHIFT, 3, movetoworkspace, 3"
        "$mainMod SHIFT, 4, movetoworkspace, 4"
        "$mainMod SHIFT, 5, movetoworkspace, 5"
        "$mainMod SHIFT, 6, movetoworkspace, 6"
        "$mainMod SHIFT, 7, movetoworkspace, 7"
        "$mainMod SHIFT, 8, movetoworkspace, 8"
        "$mainMod SHIFT, 9, movetoworkspace, 9"
        "$mainMod SHIFT, 0, movetoworkspace, 10"

        # media and volume controls
        ",XF86AudioPlay,exec, playerctl play-pause"
        ",XF86AudioNext,exec, playerctl next"
        ",XF86AudioPrev,exec, playerctl previous"
        ",XF86AudioStop,exec, playerctl stop"
        # Example special workspace (scratchpad)
        "$mainMod, S, togglespecialworkspace, magic"
        "$mainMod SHIFT, S, movetoworkspace, special:magic"

        # Scroll through existing workspaces with mainMod + scroll
        "$mainMod, mouse_down, workspace, e+1"
        "$mainMod, mouse_up, workspace, e-1"

        # SCREENSHOT
        "$mainMod,code:117, exec, pactl set-sink-mute @DEFAULT_SINK@ toggle"
      ];

      # mouse binding
      bindm = [
        "$mainMod, mouse:272, movewindow"
        "$mainMod, mouse:273, resizewindow"
      ];


      # windowrulev2
      windowrulev2 = [
        "pin,class:^(rofi)$"
        "float,class:org.pulseaudio.pavucontrol"
        "size 900 450,class:org.pulseaudio.pavucontrol"
        "float,class:com.github.hluk.copyq"
        "size 422 652,class:com.github.hluk.copyq"

        "suppressevent maximize, class:.*" # You'll probably like this.
      ];
    };

    extraConfig =
      let
        laptopConfig = ''
          monitor = eDP-1,2240x1400,0x0,1
          input {
            sensitivity = 0.9
          }
        '';
        desktopConfig = ''
          monitor=DP-3,1920x1080@144,0x0,1
          monitor=HDMI-A-1,1920x1080,-1080x-200,1,transform,3
          monitor=desc:Sharp Corporation LC40LB601U,preferred,-1920x0,1
          workspace=9, monitor:HDMI-A-1
          exec-once=[workspace 9 silent] vesktop & hyprctl dispatch workspace 9
        '';
      in
      ''
        ${if machine == "laptop" then laptopConfig else desktopConfig}

        exec-once = swww-daemon
        exec-once = nm-applet --indicator
        exec-once = fusuma
        exec-once = swww img "$(find -L .config/wallpaper -type f \( -iname '*.jpg' -o -iname '*.png' -o -iname '*.jpeg' \) | shuf -n 1)"
        exec-once = cd $($HOME)/.config/waybar && nix-shell --run "uv run python main.py" 
        exec-once = /home/${username}/.config/styles/setup.sh 

        xwayland {
          force_zero_scaling = true
        }

        env = XCURSOR_SIZE,24
        env = HYPRCURSOR_SIZE,24
        device {
          name = epic-mouse-v1
          sensitivity = -0.5
        }
        bind = SUPER_SHIFT, S, exec, grim -g "$(slurp -d)" - | wl-copy
        bind = ALT, R, submap, resize
        # will start a submap called "resize"
        submap = resize
        # sets repeatable binds for resizing the active window
        binde = , l, resizeactive, 50 0
        binde = , h, resizeactive, -50 0
        binde = , k, resizeactive, 0 -40
        binde = , j, resizeactive, 0 40 # use reset to go back to the global submap
        bind = , escape, submap, reset
        # will reset the submap, meaning end the current one and return to the global one
        submap = reset
        bind = $mainMod,code:117, exec, pactl set-sink-mute @DEFAULT_SINK@ toggle
        bindl=, XF86AudioMute, exec, pactl set-sink-mute @DEFAULT_SINK@ toggle
        bindel=, XF86AudioLowerVolume, exec, pactl -- set-sink-volume 0 -5%
        bindel=, XF86AudioRaiseVolume, exec, pactl -- set-sink-volume 0 +5%
        bindel=, XF86MonBrightnessDown, exec, brightnessctl s 5%-
        bindel=, XF86MonBrightnessUp, exec, brightnessctl s 5%+
      '';
  };
}
</file>

<file path="users/pjalv/hm.nix">
{ config, pkgs, lib, machine ? "desktop", username ? "pjalv", inputs, ... }:
let
  # Define the Git repository URL and revision (e.g., branch, commit hash, etc.)
  dotfilesRepo = pkgs.fetchgit {
    url = "https://github.com/PJalv/dotfiles.git"; # Replace with your repo URL
    rev = "296e0a345840c58e8b8e28eb9e564a283adc003e";
    # Or specify the commit hash/branch/tag
    sha256 = "sha256-Xc0bu3me8YuHwt4xZ8+juOndO0sS4IUwU0ql60s5GNc="; # This will be automatically replaced when you run `nixos-rebuild`
  };

  # Define the location of your dotfiles directory
  dotfilesDir = dotfilesRepo;

  spicetify-nix = inputs.spicetify-nix.homeManagerModules.default;

in
{
  xdg.configFile = {
    wallpaper.source = "${dotfilesDir}/.config/wallpaper"; # Neovim config
    fusuma.source = "${dotfilesDir}/.config/fusuma"; # Neovim config
    mako.source = "${dotfilesDir}/.config/mako"; # Neovim config
    styles.source = "${dotfilesDir}/.config/waybar"; # Neovim config
  };
  xdg.configFile."mimeapps.list".force = true;
  xdg.mimeApps = {
    enable = true;
    associations.added = {
      "x-scheme-handler/http" = [ "chromium-browser.desktop" ];
      "x-scheme-handler/https" = [ "chromium-browser.desktop" ];
      "text/html" = [ "chromium-browser.desktop" ];
      "application/pdf" = [ "chromium-browser.desktop" ];
    };
    defaultApplications = {
      "x-scheme-handler/http" = [ "chromium-browser.desktop" ];
      "x-scheme-handler/https" = [ "chromium-browser.desktop" ];
      "text/html" = [ "chromium-browser.desktop" ];
      "application/pdf" = [ "chromium-browser.desktop" ];
    };
  };

  home.packages = with pkgs; [
    lazygit
    swww
    sassc
    gtk-engine-murrine
    gtk_engines
    gnome-themes-extra
    zoxide
  ];

  imports = [
    ../../hm/zsh.nix
    ../../hm/rofi.nix
    ../../hm/hyprland.nix
    ../../hm/waybar.nix
    ../../hm/ghostty.nix
    ../../hm/entries.nix
    ../../hm/starship.nix
    ../../hm/spicetify.nix
    spicetify-nix
  ];

  programs.direnv = {
    enable = true;
    enableZshIntegration = true;
    nix-direnv.enable = true;
  };

  programs.chromium = {
    enable = true;
    extensions = [
      { id = "cjpalhdlnbpafiamejdnhcphjbkeiagm"; } # ublock origin
      { id = "ghmbeldphafepmbegfdlkpapadhbakde"; } # proton pass
    ];
    commandLineArgs = [ "--force-dark-mode" ];
  };

  programs.git.extraConfig.init.defaultBranch = "main";
  programs.git.extraConfig.safe.directory = "/etc/nixos";
  programs.git.extraConfig.pull.rebase = false;
  programs.git = {
    enable = true;
    userName = "PJalv";
    userEmail = "pjalvbusiness@gmail.com";
  };

  programs.gh.enable = true;
  # The state version is required and should stay at the version you
  # originally installed.
  home.stateVersion = "24.05";
  dconf.settings = {
    "org/gnome/desktop/interface" = { color-scheme = "prefer-dark"; };
  };

  gtk = {
    enable = true;
    theme = {
      name = "Tokyonight-Dark";
      package = pkgs.tokyonight-gtk-theme;

    };

    font = {
      name = "Nunito";
      size = 10;
    };

    iconTheme = {
      name = "Papirus-Dark";
      package = pkgs.papirus-icon-theme;
    };

    gtk3.extraConfig = {
      gtk-xft-antialias = 1;
      gtk-xft-hinting = 1;
      gtk-xft-hintstyle = "hintslight";
      gtk-xft-rgba = "rgb";
      gtk-application-prefer-dark-theme = 1;
    };

    gtk2.extraConfig = ''
      gtk-xft-antialias=1
      gtk-xft-hinting=1
      gtk-xft-hintstyle="hintslight"
      gtk-xft-rgba="rgb"
      gtk-application-prefer-dark-theme=1
    '';
    cursorTheme = {
      name = "catppuccin-macchiato-dark-cursors";
      package = pkgs.catppuccin-cursors.macchiatoDark;
    };
  };

  home.pointerCursor = {
    name = "catppuccin-macchiato-dark-cursors";
    package = pkgs.catppuccin-cursors.macchiatoDark;
    size = 30;
    gtk.enable = true;
    x11.enable = true;
  };

  home.sessionVariables = { };
}
</file>

<file path="users/pjalv/user.nix">
{ config, lib, pkgs, machine ? "desktop", username ? "pjalv", inputs, ... }:
let
  tuigreet = "${pkgs.greetd.tuigreet}/bin/tuigreet";
  session = "${pkgs.hyprland}/bin/Hyprland"; # Fixed typo here

  # Define base packages that are common to both laptop and desktop
  basePackages = with pkgs; [
    vim
    neovim
    wget
    networkmanagerapplet
    gnumake
    wireguard-tools
    lxqt.lxqt-policykit
    liberation_ttf
    basedpyright
    clang
    clang-tools
    cargo
    git
    basedpyright
    gopls
    lua-language-server
    nixd
    compiledb
    btop
    home-manager
    minicom
    mako
    libnotify
    wl-clipboard
    swappy
    grim
    copyq
    eza
    bc
    unzip
    slurp
    emote
    direnv
    gcc
    playerctl
    fzf
    zoxide
    ripgrep
    kitty
    waybar
    vesktop
    rofi-wayland
    rofi
    vial
    pavucontrol
    pulseaudio
    obs-studio
    xfce.thunar
    xfce.tumbler
    libreoffice
    vlc
    (import ../../hm/macropad.nix pkgs)
  ];

  # Define laptop-specific packages
  laptopPackages = with pkgs; [
    acpi
    brightnessctl
    fusuma
    catppuccin-sddm-corners
  ];

  # Define desktop-specific packages
  desktopPackages = with pkgs; [
    bottles
    steam-rom-manager
    soundwireserver
    # stm32cubemx
    # openocd
    # kdePackages.kdeconnect-kde
  ];
in
{
  # We'll use the passed-in parameters instead of defining options
  imports = [ ./${machine}/hardware-configuration.nix ];
  config = lib.mkMerge [
    # Common configuration
    {

      networking.hostName = "pjalv-${machine}";
      networking.networkmanager.enable = true;
      hardware.keyboard.qmk.enable = true;
      hardware.bluetooth.enable = true;
      hardware.bluetooth.package = pkgs.bluez;
      hardware.bluetooth.input.General.ClassicBondedOnly = false;
      services.blueman.enable = true;
      hardware.bluetooth.powerOnBoot = true;
      services.gvfs.enable = true; # Mount, trash, and other functionalities
      services.tumbler.enable = true; # Thumbnail support for images
      services.udev = {
        packages = with pkgs; [

          qmk
          qmk-udev-rules
          qmk_hid
          via
          vial
        ];

      };
      boot = {
        loader = {
          systemd-boot.enable = false;
          grub = {
            enable = true;
            device = "nodev";
            useOSProber = true;
            efiSupport = true;
          };
          efi = {
            canTouchEfiVariables = true;
            efiSysMountPoint =
              if machine == "laptop" then "/boot" else "/boot/efi";
          };
        };
        kernelPackages = pkgs.linuxPackages_latest;
      };

      time.timeZone = "America/Los_Angeles";
      i18n.defaultLocale = "en_US.UTF-8";

      services = {
        xserver.enable = true;
        pipewire = {
          enable = true;
          alsa.enable = true;
          alsa.support32Bit = true;
          pulse.enable = true;
        };
      };

      programs = {
        hyprland = {
          enable = true;
          xwayland.enable = true;
        };
        zsh.enable = true;
        ydotool = {
          enable = true;
        };
      };
      virtualisation.docker.enable = false;

      users.users.${username} = {
        isNormalUser = true;
        extraGroups =
          [ "wheel" "input" "network" "dialout" "docker" "networkmanager" "ydotool" ];
        shell = pkgs.zsh;
      };
      users.defaultUserShell = pkgs.zsh;

      nix.settings.experimental-features = [ "nix-command" "flakes" ];
      nixpkgs.config.allowUnfree = true;
      hardware.pulseaudio.enable = false;
      security = {
        rtkit.enable = true;
        polkit.enable = true;
      };

      fonts.packages = with pkgs; [
        font-awesome
        noto-fonts-cjk-sans
        nerd-fonts.fira-code
      ];

      services.openssh.enable = true;
      networking.firewall.allowedUDPPorts = [ 51820 ];

      environment.systemPackages = basePackages;

      system.stateVersion = "24.05";
    }

    # Desktop-specific configuration
    (lib.mkIf (machine == "desktop") {
      services.greetd = {
        enable = true;
        settings = {
          initial_session = {
            command = "${session}";
            user = "${username}";
          };
          default_session = {
            command =
              "${tuigreet} --greeting 'Welcome to Desktop' --asterisks --remember --remember-user-session --time -d -cmd Hyprland";
            user = "greeter";
          };
        };
      };

      virtualisation.waydroid.enable = false;
      programs.steam = {
        enable = true;
        remotePlay.openFirewall = true;
        dedicatedServer.openFirewall = true;
        localNetworkGameTransfers.openFirewall = true;
      };

      networking.interfaces = {
        enp8s0 = {
          wakeOnLan.enable = true;
          useDHCP = true;
        };
      };

      environment.systemPackages = desktopPackages;
    })

    # Laptop-specific configuration
    (lib.mkIf (machine == "laptop") {
      services = {
        displayManager.sddm = {
          enable = true;
          theme = "catppuccin-sddm-corners";
        };
        power-profiles-daemon.enable = true;
        libinput.enable = true;
      };

      environment.systemPackages = laptopPackages;
    })
  ];
}
</file>

<file path="flake.nix">
{
  description = "PJalv";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    ghostty.url = "github:ghostty-org/ghostty?ref=v1.1.3";
    spicetify-nix.url = "github:Gerg-L/spicetify-nix";
  };

  outputs =
    { ghostty
    , self
    , nixpkgs
    , nix
    , nixos-hardware
    , home-manager
    , spicetify-nix
    ,
    }@inputs: {
      nixosConfigurations = {
        pjalv-desktop = nixpkgs.lib.nixosSystem {
          system = "x86_64-linux";
          specialArgs = {
            machine = "desktop";
            username = "pjalv";
          };
          modules = [
            {
              environment.systemPackages =
                [ ghostty.packages.x86_64-linux.default ];
            }
            ./users/pjalv/user.nix
            home-manager.nixosModules.home-manager
            {
              home-manager.useUserPackages = true;
              home-manager.useGlobalPkgs = true;
              home-manager.users.pjalv = import ./users/pjalv/hm.nix;
              home-manager.extraSpecialArgs = {
                machine = "desktop";
                username = "pjalv";
                inherit inputs;
              };
            }
          ];
        };
        pjalv-laptop = nixpkgs.lib.nixosSystem {
          system = "x86_64-linux";
          specialArgs = {
            machine = "laptop";
            username = "pjalv";
          };
          modules = [
            {
              environment.systemPackages =
                [ ghostty.packages.x86_64-linux.default ];
            }

            ./users/pjalv/user.nix
            home-manager.nixosModules.home-manager
            {

              home-manager.useGlobalPkgs = true;
              home-manager.useUserPackages = true;
              home-manager.users.pjalv = import ./users/pjalv/hm.nix;
              home-manager.extraSpecialArgs = {
                machine = "laptop";
                username = "pjalv";
                inherit inputs;
              };

            }
          ];
        };
      };
      homeConfigurations =
        let
          username = "pjalv";
          #pkgs = import nixpkgs { system = "x86_64-linux"; };
          pkgs = import nixpkgs { system = "aarch64-linux"; }; # For ARM-based systems
        in
        {
          "${username}" =
            home-manager.lib.homeManagerConfiguration {
              inherit pkgs;

              # Specify your home configuration modules here, for example,
              # the path to your home.nix.
              modules = [ ./users/remote/hm.nix ];
              extraSpecialArgs = { inherit username; };

              # Optionally use extraSpecialArgs
              # to pass through arguments to home.nix
            };
        };

    };

}
</file>

<file path="hm/waybar.nix">
{ config, pkgs, lib, machine ? "desktop", username ? "pjalv", ... }:

let
  # Define the Git repository URL and revision (e.g., branch, commit hash, etc.)
  dotfilesRepo = pkgs.fetchgit {
    url = "https://github.com/PJalv/dotfiles.git"; # Replace with your repo URL
    rev = "6d3f321c260580eb61a16749a31faeb8b83bc153";
    # Or specify the commit hash/branch/tag
    sha256 = "sha256-MeTkMZwqlSBam7amaAlQ1xmKJQypFy4cGUqzCe91jgk="; # This will be automatically replaced when you run `nixos-rebuild`
  };

  # Define the location of your dotfiles directory
  dotfilesDir = dotfilesRepo;

in
{

  programs.waybar = {
    enable = true;
    package = pkgs.waybar.overrideAttrs (oldAttrs: {
      mesonFlags = oldAttrs.mesonFlags ++ [ "-Dexperimental=true" ];
    });
    systemd.enable = false;
    style = ''
      ${builtins.readFile "${dotfilesDir}/.config/waybar/styles/style.css"}
    '';
    settings = [{
      height = 20;
      layer = "top";
      position = "top";
      tray = { spacing = 10; };
      modules-center = [ "hyprland/window" ];
      modules-left =
        [ "hyprland/workspaces" "custom/media" "custom/process_volume" "custom/voice_typer" ];
      modules-right = [ "pulseaudio" "network" "cpu" "memory" "backlight" ]
        ++ (if machine == "laptop" then [
        "power-profiles-daemon"
        "temperature"
        "battery"
      ] else
        [ ]) ++ [ "clock" "tray" ];
      battery = {
        format = "{capacity}% {icon} ";
        format-alt = "{time} {icon}";
        format-charging = "{capacity}%  ";
        format-icons = [ " " " " " " " " " " ];
        format-plugged = "{capacity}%  ";
        states = {
          critical = 15;
          warning = 30;
        };
      };
      power-profiles-daemon = {
        format = "{icon}";
        # format = "Power profile: {profile}\nDriver: {driver}";
        tooltip = true;
        format-icons = {
          default = " ";
          performance = " ";
          balanced = " ";
          power-saver = " ";
        };
      };
      backlight = {
        format = "{percent}% {icon}";
        format-icons = [ " " " " " " " " " " " " " " " " " " ];
      };
      clock = {
        tooltip-format = ''
          <big>{:%A, %d.%B %Y }</big>
          <tt><small>{calendar}</small></tt>'';
        format = "{:%I:%M:%S}";
        format-alt = " {:%d/%m/%Y  %H:%M:%S}";
        interval = 1;
      };
      cpu = {
        format = "{usage}%  ";
        tooltip = false;
        interval = 2;
      };
      memory = {
        interval = 5;
        format = "{}%  ";
      };
      network = {
        interval = 1;
        format-alt = "{ifname}: {ipaddr}/{cidr}";
        format-disconnected = "Disconnected ⚠";
        format-ethernet = "{ipaddr}/{cidr}";
        format-linked = "{ifname} (No IP) ";
        format-wifi = "{essid} ({signalStrength}%)  ";
      };
      "custom/media" = {
        exec = ''
          playerctl --follow metadata --format '{"text": "{{ artist }} - {{ title }}", "class": "custom-spotify", "alt": "spotify"}' --player=spotify'';
        format = "{}  ";
        return-type = "json";
        on-click = "playerctl --player=spotify,vlc play-pause";
        on-scroll-up = "playerctl --player=spotify,vlc next";
        on-scroll-down = "playerctl --player=spotify,vlc previous";
      };
      "custom/process_volume" = {
        exec = "${dotfilesDir}/.config/waybar/apps_volume chromium spotify";
        format = "{}";
        return-type = "json";
      };
      "custom/voice_typer" = {
        exec = "bash ${dotfilesDir}/.config/waybar/voice_typer_waybar.sh";
        format = "{}";
        return-type = "json";
        on-click = "echo -n 'TOGGLE' | nc -U '/tmp/voice_typer.sock'";
      };
      pulseaudio = {
        scroll-step = 2;
        format = "{volume}% {icon} {format_source}";
        format-bluetooth = "{volume}% {icon} {format_source}";
        format-bluetooth-muted = " {icon} {format_source}";
        format-icons = {
          car = "";
          default = [ " " " " "  " ];
          handsfree = " ";
          headphones = " ";
          headset = " ";
          phone = " ";
          portable = " ";
        };
        format-muted = "  {format_source}";
        format-source = "{volume}% ";
        format-source-muted = " ";
        on-click = "pavucontrol";
        on-click-middle = "pactl set-sink-mute 0 toggle";
      };
      "hyprland/mode" = { format = ''<span style="italic">{}</span>''; };
      temperature = {
        critical-threshold = 80;
        format = "{temperatureC}°C {icon}";
        format-icons = [ "" "" "" ];
      };
    }];
  };

  xdg.configFile."waybar/mocha.css".text = ''
    @define-color rosewater #f5e0dc;
    @define-color flamingo #f2cdcd;
    @define-color pink #f5c2e7;
    @define-color mauve #cba6f7;
    @define-color red #f38ba8;
    @define-color maroon #eba0ac;
    @define-color peach #fab387;
    @define-color yellow #f9e2af;
    @define-color green #a6e3a1;
    @define-color teal #94e2d5;
    @define-color sky #89dceb;
    @define-color sapphire #74c7ec;
    @define-color blue #89b4fa;
    @define-color lavender #b4befe;
    @define-color text #cdd6f4;
    @define-color subtext1 #bac2de;
    @define-color subtext0 #a6adc8;
    @define-color overlay2 #9399b2;
    @define-color overlay1 #7f849c;
    @define-color overlay0 #6c7086;
    @define-color surface2 #585b70;
    @define-color surface1 #45475a;
    @define-color surface0 #313244;
    @define-color base #1e1e2e;
    @define-color mantle #181825;
    @define-color crust #11111b;
  '';
}
</file>

</files>
